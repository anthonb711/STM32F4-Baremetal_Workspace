// Where is the led connected? - Look in the dev board User Manual for User LED LD2
// Port:	A
// Pin:		5


// How do we get to Port A? - Look in the controller datasheet - Memory Map Peripherals GIPO Port A
#define PERIPH_BASE			(0x40000000UL)
#define AHB1PERIPH_OFFSET	(0x00020000UL) // 0x4002 0000 = starting point of the AHB1 bus and GPIO A
#define AHB1PERIPH_BASE		(PERIPH_BASE + AHB1PERIPH_OFFSET)
#define GPIOA_OFFSET		(0x0000UL)
#define GPIOA_BASE			(AHB1PERIPH_BASE + GPIOA_OFFSET)

// RCC(resetting clock control) use to enable the clock for AGH1 Bus
#define RCC_OFFSET			(0x3800UL)
#define RCC_BASE			(AHB1PERIPH_BASE + RCC_OFFSET)	// 0x4002 3800

// AHB1 enable register
#define AHB1EN_R_OFFSET		(0x30UL)
#define RCC_AHB1EN_R		(*(volatile unsigned int *)(RCC_BASE + AHB1EN_R_OFFSET)) // Must type cast registers to into pointers and de-ref to access the memory

#define MODE_R_OFFSET		(0x00UL)	// mode offset for GPIO A...E & H
#define GPIOA_MODE_R		(*(volatile unsigned int *)(GPIOA_BASE + MODE_R_OFFSET))

#define OD_R_OFFSET			(0x014UL)
#define GPIOA_OD_R			(*(volatile unsigned int *)(GPIOA_BASE + OD_R_OFFSET))

#define GPIOAEN				(1U<<0)	// bit 0 gets set high (0b 0000 0000 0000 0000 0000 0000 0000 0001)
#define PIN5				(1U<<5)
#define LED_PIN				PIN5

#define __IO volatile



typedef struct
{
	__IO uint32_t MODER;	/*!< GPIO port mode register,				Address offset: 0x00		*/
	__IO uint32_t OTYPER;	/*!< GPIO port output type register,		Address offset: 0x04		*/
	__IO uint32_t OSPEEDR;	/*!< GPIO port output speed register,		Address offset: 0x08		*/
	__IO uint32_t PUPDR;	/*!< GPIO port pull-up/pull-down register,	Address offset: 0x0C		*/
	__IO uint32_t IDR;		/*!< GPIO port input data register,			Address offset: 0x10		*/
	__IO uint32_t ODR;		/*!< GPIO port output data register,		Address offset: 0x14		*/
	__IO uint32_t BSRR;		/*!< GPIO port bit set/reset register,		Address offset: 0x18		*/
	__IO uint32_t LCKR;		/*!< GPIO port configuration lock register,	Address offset: 0x1c		*/
	__IO uint32_t AFR[2];	/*!< GPIO port alternate function register,	Address offset: 0x20-0x24	*/

}GPIO_TypedDef;


int main(void)
{
	/*1. Enable clock access to GPIOA*/
	RCC_AHB1EN_R |= GPIOAEN; // friendly programming the "\=" OR operator changes only the bits specified.

	/*2. Set PA5 as output pin - Reference manual for GIPO mode and data I/O register bits*/
	GPIOA_MODE_R |= (1U<<10);	// set bit 10 to 1
	GPIOA_MODE_R &=~(1U<<11);	//sets bit 11 to 0


	while(1)
	{
		/*3. Set PA5 high*/
		//GPIOA_OD_R |= LED_PIN;

		/*4. Experiment 2 : toggle PA5*/
		GPIOA_OD_R ^= LED_PIN;
		for(int i = 0; i <1000000; i++){;}


	}
}














