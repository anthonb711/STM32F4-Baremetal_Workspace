
17_adc_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001350  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080014f0  080014f0  000024f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001538  08001538  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001538  08001538  00002538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001540  08001540  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001540  08001540  00002540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001544  08001544  00002544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001548  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  080015a4  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080015a4  000031cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001649  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006eb  00000000  00000000  000046d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b0  00000000  00000000  00004dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000128  00000000  00000000  00004f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fb8c  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002102  00000000  00000000  00014c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055933  00000000  00000000  00016d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006c659  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ccc  00000000  00000000  0006c69c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0006d368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080014d8 	.word	0x080014d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080014d8 	.word	0x080014d8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	@ (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <pa1_adc_interrupt_init>:
#define CR2_SWSTART		(1U<<30)
#define CR1_EOCIE		(1U<<5)


void pa1_adc_interrupt_init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c0:	b672      	cpsid	i
}
 80002c2:	bf00      	nop
	/* disable global interrupt, THIS IS BEST PRACTICE */
	__disable_irq();
	/* enable clock access to GPIOA */
	RCC->AHB1ENR |= GPIOAEN;
 80002c4:	4b15      	ldr	r3, [pc, #84]	@ (800031c <pa1_adc_interrupt_init+0x60>)
 80002c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002c8:	4a14      	ldr	r2, [pc, #80]	@ (800031c <pa1_adc_interrupt_init+0x60>)
 80002ca:	f043 0301 	orr.w	r3, r3, #1
 80002ce:	6313      	str	r3, [r2, #48]	@ 0x30

	/* set the mode of PA1 to analog mode */
	GPIOA->MODER |= ((1U<<2)|(1U<<3));
 80002d0:	4b13      	ldr	r3, [pc, #76]	@ (8000320 <pa1_adc_interrupt_init+0x64>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a12      	ldr	r2, [pc, #72]	@ (8000320 <pa1_adc_interrupt_init+0x64>)
 80002d6:	f043 030c 	orr.w	r3, r3, #12
 80002da:	6013      	str	r3, [r2, #0]

	/***  configure the ADC module ***/
	/* enable clock access to ADC*/
	RCC->APB2ENR |= ADC1EN;
 80002dc:	4b0f      	ldr	r3, [pc, #60]	@ (800031c <pa1_adc_interrupt_init+0x60>)
 80002de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002e0:	4a0e      	ldr	r2, [pc, #56]	@ (800031c <pa1_adc_interrupt_init+0x60>)
 80002e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002e6:	6453      	str	r3, [r2, #68]	@ 0x44
	/*  enable end-of-conversino interrupt */
	ADC1->CR1 |= CR1_EOCIE;
 80002e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000324 <pa1_adc_interrupt_init+0x68>)
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000324 <pa1_adc_interrupt_init+0x68>)
 80002ee:	f043 0320 	orr.w	r3, r3, #32
 80002f2:	6053      	str	r3, [r2, #4]
	/* enable the interrupt in the NVIC*/
	NVIC_EnableIRQ(ADC_IRQn);
 80002f4:	2012      	movs	r0, #18
 80002f6:	f7ff ffc3 	bl	8000280 <__NVIC_EnableIRQ>


	/* conversion sequence start */
	ADC1->SQR3 = ADC_CH1;
 80002fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000324 <pa1_adc_interrupt_init+0x68>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	635a      	str	r2, [r3, #52]	@ 0x34
	/* conversion sequence length */
	ADC1->SQR1 = ADC_SEQ_LEN_1;
 8000300:	4b08      	ldr	r3, [pc, #32]	@ (8000324 <pa1_adc_interrupt_init+0x68>)
 8000302:	2200      	movs	r2, #0
 8000304:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* enable ADC Module */
	ADC1->CR2 |= CR2_ADON;
 8000306:	4b07      	ldr	r3, [pc, #28]	@ (8000324 <pa1_adc_interrupt_init+0x68>)
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	4a06      	ldr	r2, [pc, #24]	@ (8000324 <pa1_adc_interrupt_init+0x68>)
 800030c:	f043 0301 	orr.w	r3, r3, #1
 8000310:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000312:	b662      	cpsie	i
}
 8000314:	bf00      	nop

	/* enable global interrupt, THIS IS BEST PRACTICE */
	__enable_irq();
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40023800 	.word	0x40023800
 8000320:	40020000 	.word	0x40020000
 8000324:	40012000 	.word	0x40012000

08000328 <start_conversion>:
	/* enable ADC Module */
	ADC1->CR2 |= CR2_ADON;
}

void start_conversion(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
	/* enable continuous conversion */
	ADC1->CR2 |= CR2_CONT;
 800032c:	4b08      	ldr	r3, [pc, #32]	@ (8000350 <start_conversion+0x28>)
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	4a07      	ldr	r2, [pc, #28]	@ (8000350 <start_conversion+0x28>)
 8000332:	f043 0302 	orr.w	r3, r3, #2
 8000336:	6093      	str	r3, [r2, #8]
	/* start ADC conversion */
	ADC1->CR2 |= CR2_SWSTART;
 8000338:	4b05      	ldr	r3, [pc, #20]	@ (8000350 <start_conversion+0x28>)
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	4a04      	ldr	r2, [pc, #16]	@ (8000350 <start_conversion+0x28>)
 800033e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000342:	6093      	str	r3, [r2, #8]
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	40012000 	.word	0x40012000

08000354 <main>:
static void adc_callback(void);

uint32_t sensor_value;

int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	uart2_tx_init();
 8000358:	f000 f8de 	bl	8000518 <uart2_tx_init>
	pa1_adc_interrupt_init();
 800035c:	f7ff ffae 	bl	80002bc <pa1_adc_interrupt_init>
	start_conversion();
 8000360:	f7ff ffe2 	bl	8000328 <start_conversion>

	while(1)
 8000364:	bf00      	nop
 8000366:	e7fd      	b.n	8000364 <main+0x10>

08000368 <adc_callback>:
	}

}

static void adc_callback(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	sensor_value = ADC1->DR;
 800036c:	4b05      	ldr	r3, [pc, #20]	@ (8000384 <adc_callback+0x1c>)
 800036e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000370:	4a05      	ldr	r2, [pc, #20]	@ (8000388 <adc_callback+0x20>)
 8000372:	6013      	str	r3, [r2, #0]

	printf("Sensor_value: %d \n\r", (int)sensor_value);
 8000374:	4b04      	ldr	r3, [pc, #16]	@ (8000388 <adc_callback+0x20>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4619      	mov	r1, r3
 800037a:	4804      	ldr	r0, [pc, #16]	@ (800038c <adc_callback+0x24>)
 800037c:	f000 fa42 	bl	8000804 <iprintf>

}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40012000 	.word	0x40012000
 8000388:	20000078 	.word	0x20000078
 800038c:	080014f0 	.word	0x080014f0

08000390 <ADC_IRQHandler>:

void ADC_IRQHandler(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	if (ADC1->SR & SR_EOC)
 8000394:	4b07      	ldr	r3, [pc, #28]	@ (80003b4 <ADC_IRQHandler+0x24>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f003 0302 	and.w	r3, r3, #2
 800039c:	2b00      	cmp	r3, #0
 800039e:	d007      	beq.n	80003b0 <ADC_IRQHandler+0x20>
	{
		/* clear the EOC flag*/
		ADC1->SR &=~ SR_EOC;
 80003a0:	4b04      	ldr	r3, [pc, #16]	@ (80003b4 <ADC_IRQHandler+0x24>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a03      	ldr	r2, [pc, #12]	@ (80003b4 <ADC_IRQHandler+0x24>)
 80003a6:	f023 0302 	bic.w	r3, r3, #2
 80003aa:	6013      	str	r3, [r2, #0]

		adc_callback();
 80003ac:	f7ff ffdc 	bl	8000368 <adc_callback>
	}
}
 80003b0:	bf00      	nop
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40012000 	.word	0x40012000

080003b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b086      	sub	sp, #24
 80003bc:	af00      	add	r7, sp, #0
 80003be:	60f8      	str	r0, [r7, #12]
 80003c0:	60b9      	str	r1, [r7, #8]
 80003c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]
 80003c8:	e00a      	b.n	80003e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003ca:	f3af 8000 	nop.w
 80003ce:	4601      	mov	r1, r0
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	1c5a      	adds	r2, r3, #1
 80003d4:	60ba      	str	r2, [r7, #8]
 80003d6:	b2ca      	uxtb	r2, r1
 80003d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	3301      	adds	r3, #1
 80003de:	617b      	str	r3, [r7, #20]
 80003e0:	697a      	ldr	r2, [r7, #20]
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	429a      	cmp	r2, r3
 80003e6:	dbf0      	blt.n	80003ca <_read+0x12>
  }

  return len;
 80003e8:	687b      	ldr	r3, [r7, #4]
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3718      	adds	r7, #24
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}

080003f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003f2:	b580      	push	{r7, lr}
 80003f4:	b086      	sub	sp, #24
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	60f8      	str	r0, [r7, #12]
 80003fa:	60b9      	str	r1, [r7, #8]
 80003fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003fe:	2300      	movs	r3, #0
 8000400:	617b      	str	r3, [r7, #20]
 8000402:	e009      	b.n	8000418 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	1c5a      	adds	r2, r3, #1
 8000408:	60ba      	str	r2, [r7, #8]
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	4618      	mov	r0, r3
 800040e:	f000 f877 	bl	8000500 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000412:	697b      	ldr	r3, [r7, #20]
 8000414:	3301      	adds	r3, #1
 8000416:	617b      	str	r3, [r7, #20]
 8000418:	697a      	ldr	r2, [r7, #20]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	429a      	cmp	r2, r3
 800041e:	dbf1      	blt.n	8000404 <_write+0x12>
  }
  return len;
 8000420:	687b      	ldr	r3, [r7, #4]
}
 8000422:	4618      	mov	r0, r3
 8000424:	3718      	adds	r7, #24
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}

0800042a <_close>:

int _close(int file)
{
 800042a:	b480      	push	{r7}
 800042c:	b083      	sub	sp, #12
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000432:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000436:	4618      	mov	r0, r3
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr

08000442 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000442:	b480      	push	{r7}
 8000444:	b083      	sub	sp, #12
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
 800044a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000452:	605a      	str	r2, [r3, #4]
  return 0;
 8000454:	2300      	movs	r3, #0
}
 8000456:	4618      	mov	r0, r3
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr

08000462 <_isatty>:

int _isatty(int file)
{
 8000462:	b480      	push	{r7}
 8000464:	b083      	sub	sp, #12
 8000466:	af00      	add	r7, sp, #0
 8000468:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800046a:	2301      	movs	r3, #1
}
 800046c:	4618      	mov	r0, r3
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr

08000478 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	60b9      	str	r1, [r7, #8]
 8000482:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000484:	2300      	movs	r3, #0
}
 8000486:	4618      	mov	r0, r3
 8000488:	3714      	adds	r7, #20
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr
	...

08000494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800049c:	4a14      	ldr	r2, [pc, #80]	@ (80004f0 <_sbrk+0x5c>)
 800049e:	4b15      	ldr	r3, [pc, #84]	@ (80004f4 <_sbrk+0x60>)
 80004a0:	1ad3      	subs	r3, r2, r3
 80004a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004a8:	4b13      	ldr	r3, [pc, #76]	@ (80004f8 <_sbrk+0x64>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d102      	bne.n	80004b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004b0:	4b11      	ldr	r3, [pc, #68]	@ (80004f8 <_sbrk+0x64>)
 80004b2:	4a12      	ldr	r2, [pc, #72]	@ (80004fc <_sbrk+0x68>)
 80004b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004b6:	4b10      	ldr	r3, [pc, #64]	@ (80004f8 <_sbrk+0x64>)
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4413      	add	r3, r2
 80004be:	693a      	ldr	r2, [r7, #16]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	d207      	bcs.n	80004d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004c4:	f000 f9b8 	bl	8000838 <__errno>
 80004c8:	4603      	mov	r3, r0
 80004ca:	220c      	movs	r2, #12
 80004cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004d2:	e009      	b.n	80004e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004d4:	4b08      	ldr	r3, [pc, #32]	@ (80004f8 <_sbrk+0x64>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004da:	4b07      	ldr	r3, [pc, #28]	@ (80004f8 <_sbrk+0x64>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4413      	add	r3, r2
 80004e2:	4a05      	ldr	r2, [pc, #20]	@ (80004f8 <_sbrk+0x64>)
 80004e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004e6:	68fb      	ldr	r3, [r7, #12]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3718      	adds	r7, #24
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20020000 	.word	0x20020000
 80004f4:	00000400 	.word	0x00000400
 80004f8:	2000007c 	.word	0x2000007c
 80004fc:	200001d0 	.word	0x200001d0

08000500 <__io_putchar>:
 * So something else must be done with the out printf() calls fputc().
 * __io_putchar() is a hook function that STM uses to redirect the printf() to some other use place.
 * In this case to the UART TX through the uart2_write().
***********/
int __io_putchar(int ch)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  uart2_write(ch);
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f000 f851 	bl	80005b0 <uart2_write>

  return ch;
 800050e:	687b      	ldr	r3, [r7, #4]
}
 8000510:	4618      	mov	r0, r3
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <uart2_tx_init>:
}



void uart2_tx_init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	/*************** Configure the GPIO pin ***************/
	/* enable clock access to GPIOA */
	RCC->AHB1ENR |= GPIOAEN;
 800051c:	4b20      	ldr	r3, [pc, #128]	@ (80005a0 <uart2_tx_init+0x88>)
 800051e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000520:	4a1f      	ldr	r2, [pc, #124]	@ (80005a0 <uart2_tx_init+0x88>)
 8000522:	f043 0301 	orr.w	r3, r3, #1
 8000526:	6313      	str	r3, [r2, #48]	@ 0x30

	/* set PA2 mode to alt function mode */
	GPIOA->MODER &=~(1U<<4);
 8000528:	4b1e      	ldr	r3, [pc, #120]	@ (80005a4 <uart2_tx_init+0x8c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a1d      	ldr	r2, [pc, #116]	@ (80005a4 <uart2_tx_init+0x8c>)
 800052e:	f023 0310 	bic.w	r3, r3, #16
 8000532:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000534:	4b1b      	ldr	r3, [pc, #108]	@ (80005a4 <uart2_tx_init+0x8c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a1a      	ldr	r2, [pc, #104]	@ (80005a4 <uart2_tx_init+0x8c>)
 800053a:	f043 0320 	orr.w	r3, r3, #32
 800053e:	6013      	str	r3, [r2, #0]

	/* set PA2 alt function type to UART_TX (AF07) (0111)(bits 8-11) */
	/* AFR has an arry of size 2, [0]for AFRL [1] for AFRH */
	GPIOA->AFR[0] |= (1U<<8);
 8000540:	4b18      	ldr	r3, [pc, #96]	@ (80005a4 <uart2_tx_init+0x8c>)
 8000542:	6a1b      	ldr	r3, [r3, #32]
 8000544:	4a17      	ldr	r2, [pc, #92]	@ (80005a4 <uart2_tx_init+0x8c>)
 8000546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800054a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 800054c:	4b15      	ldr	r3, [pc, #84]	@ (80005a4 <uart2_tx_init+0x8c>)
 800054e:	6a1b      	ldr	r3, [r3, #32]
 8000550:	4a14      	ldr	r2, [pc, #80]	@ (80005a4 <uart2_tx_init+0x8c>)
 8000552:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000556:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000558:	4b12      	ldr	r3, [pc, #72]	@ (80005a4 <uart2_tx_init+0x8c>)
 800055a:	6a1b      	ldr	r3, [r3, #32]
 800055c:	4a11      	ldr	r2, [pc, #68]	@ (80005a4 <uart2_tx_init+0x8c>)
 800055e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000562:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000564:	4b0f      	ldr	r3, [pc, #60]	@ (80005a4 <uart2_tx_init+0x8c>)
 8000566:	6a1b      	ldr	r3, [r3, #32]
 8000568:	4a0e      	ldr	r2, [pc, #56]	@ (80005a4 <uart2_tx_init+0x8c>)
 800056a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800056e:	6213      	str	r3, [r2, #32]

	/*************** Configure the uart module ***************/
	/* enable clock access to uart2 */
	RCC->APB1ENR |= USART2EN;
 8000570:	4b0b      	ldr	r3, [pc, #44]	@ (80005a0 <uart2_tx_init+0x88>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000574:	4a0a      	ldr	r2, [pc, #40]	@ (80005a0 <uart2_tx_init+0x88>)
 8000576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800057a:	6413      	str	r3, [r2, #64]	@ 0x40

	/* configure bauderate */
	uart_set_bd(USART2,SYS_FREQ, UART_BAUDRATE);
 800057c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000580:	4909      	ldr	r1, [pc, #36]	@ (80005a8 <uart2_tx_init+0x90>)
 8000582:	480a      	ldr	r0, [pc, #40]	@ (80005ac <uart2_tx_init+0x94>)
 8000584:	f000 f82c 	bl	80005e0 <uart_set_bd>

	/* configure the transfer direction */
	USART2->CR1 = CR1_TE; // Clean the UART overwrite instead of friendly programming with the |=
 8000588:	4b08      	ldr	r3, [pc, #32]	@ (80005ac <uart2_tx_init+0x94>)
 800058a:	2208      	movs	r2, #8
 800058c:	60da      	str	r2, [r3, #12]
	/* enable the uart module */
	USART2->CR1 |= CR1_UE; // We have already configure the TE and defaults need to keep it with friendly programming |=
 800058e:	4b07      	ldr	r3, [pc, #28]	@ (80005ac <uart2_tx_init+0x94>)
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	4a06      	ldr	r2, [pc, #24]	@ (80005ac <uart2_tx_init+0x94>)
 8000594:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000598:	60d3      	str	r3, [r2, #12]
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40023800 	.word	0x40023800
 80005a4:	40020000 	.word	0x40020000
 80005a8:	00f42400 	.word	0x00f42400
 80005ac:	40004400 	.word	0x40004400

080005b0 <uart2_write>:
	return USART2->DR;

}

void uart2_write(int ch)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	/* make sure transmit data register is empty */
	while(!(USART2->SR & SR_TXE)){}
 80005b8:	bf00      	nop
 80005ba:	4b08      	ldr	r3, [pc, #32]	@ (80005dc <uart2_write+0x2c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d0f9      	beq.n	80005ba <uart2_write+0xa>

	/* write to transmit data register */
	USART2->DR = (ch & 0xFF);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4a04      	ldr	r2, [pc, #16]	@ (80005dc <uart2_write+0x2c>)
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	6053      	str	r3, [r2, #4]

}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	40004400 	.word	0x40004400

080005e0 <uart_set_bd>:

static void uart_set_bd(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, Baudrate); //BRR = BaudRateRegister
 80005ec:	6879      	ldr	r1, [r7, #4]
 80005ee:	68b8      	ldr	r0, [r7, #8]
 80005f0:	f000 f808 	bl	8000604 <compute_uart_bd>
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	609a      	str	r2, [r3, #8]

}
 80005fc:	bf00      	nop
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
	return (PeriphClk + (Baudrate/2U)) / Baudrate;
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	085a      	lsrs	r2, r3, #1
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	441a      	add	r2, r3
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	fbb2 f3f3 	udiv	r3, r2, r3
 800061c:	b29b      	uxth	r3, r3
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
	...

0800062c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800062c:	480d      	ldr	r0, [pc, #52]	@ (8000664 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800062e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000630:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000634:	480c      	ldr	r0, [pc, #48]	@ (8000668 <LoopForever+0x6>)
  ldr r1, =_edata
 8000636:	490d      	ldr	r1, [pc, #52]	@ (800066c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000638:	4a0d      	ldr	r2, [pc, #52]	@ (8000670 <LoopForever+0xe>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800063c:	e002      	b.n	8000644 <LoopCopyDataInit>

0800063e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000642:	3304      	adds	r3, #4

08000644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000648:	d3f9      	bcc.n	800063e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064a:	4a0a      	ldr	r2, [pc, #40]	@ (8000674 <LoopForever+0x12>)
  ldr r4, =_ebss
 800064c:	4c0a      	ldr	r4, [pc, #40]	@ (8000678 <LoopForever+0x16>)
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000650:	e001      	b.n	8000656 <LoopFillZerobss>

08000652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000654:	3204      	adds	r2, #4

08000656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000658:	d3fb      	bcc.n	8000652 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800065a:	f000 f8f3 	bl	8000844 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800065e:	f7ff fe79 	bl	8000354 <main>

08000662 <LoopForever>:

LoopForever:
  b LoopForever
 8000662:	e7fe      	b.n	8000662 <LoopForever>
  ldr   r0, =_estack
 8000664:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800066c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000670:	08001548 	.word	0x08001548
  ldr r2, =_sbss
 8000674:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000678:	200001cc 	.word	0x200001cc

0800067c <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800067c:	e7fe      	b.n	800067c <BusFault_Handler>
	...

08000680 <std>:
 8000680:	2300      	movs	r3, #0
 8000682:	b510      	push	{r4, lr}
 8000684:	4604      	mov	r4, r0
 8000686:	e9c0 3300 	strd	r3, r3, [r0]
 800068a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800068e:	6083      	str	r3, [r0, #8]
 8000690:	8181      	strh	r1, [r0, #12]
 8000692:	6643      	str	r3, [r0, #100]	@ 0x64
 8000694:	81c2      	strh	r2, [r0, #14]
 8000696:	6183      	str	r3, [r0, #24]
 8000698:	4619      	mov	r1, r3
 800069a:	2208      	movs	r2, #8
 800069c:	305c      	adds	r0, #92	@ 0x5c
 800069e:	f000 f8c3 	bl	8000828 <memset>
 80006a2:	4b0d      	ldr	r3, [pc, #52]	@ (80006d8 <std+0x58>)
 80006a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80006a6:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <std+0x5c>)
 80006a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80006aa:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <std+0x60>)
 80006ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80006ae:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <std+0x64>)
 80006b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80006b2:	4b0d      	ldr	r3, [pc, #52]	@ (80006e8 <std+0x68>)
 80006b4:	6224      	str	r4, [r4, #32]
 80006b6:	429c      	cmp	r4, r3
 80006b8:	d006      	beq.n	80006c8 <std+0x48>
 80006ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80006be:	4294      	cmp	r4, r2
 80006c0:	d002      	beq.n	80006c8 <std+0x48>
 80006c2:	33d0      	adds	r3, #208	@ 0xd0
 80006c4:	429c      	cmp	r4, r3
 80006c6:	d105      	bne.n	80006d4 <std+0x54>
 80006c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80006cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006d0:	f000 b8dc 	b.w	800088c <__retarget_lock_init_recursive>
 80006d4:	bd10      	pop	{r4, pc}
 80006d6:	bf00      	nop
 80006d8:	080010e1 	.word	0x080010e1
 80006dc:	08001103 	.word	0x08001103
 80006e0:	0800113b 	.word	0x0800113b
 80006e4:	0800115f 	.word	0x0800115f
 80006e8:	20000080 	.word	0x20000080

080006ec <stdio_exit_handler>:
 80006ec:	4a02      	ldr	r2, [pc, #8]	@ (80006f8 <stdio_exit_handler+0xc>)
 80006ee:	4903      	ldr	r1, [pc, #12]	@ (80006fc <stdio_exit_handler+0x10>)
 80006f0:	4803      	ldr	r0, [pc, #12]	@ (8000700 <stdio_exit_handler+0x14>)
 80006f2:	f000 b869 	b.w	80007c8 <_fwalk_sglue>
 80006f6:	bf00      	nop
 80006f8:	20000000 	.word	0x20000000
 80006fc:	08001079 	.word	0x08001079
 8000700:	20000010 	.word	0x20000010

08000704 <cleanup_stdio>:
 8000704:	6841      	ldr	r1, [r0, #4]
 8000706:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <cleanup_stdio+0x34>)
 8000708:	4299      	cmp	r1, r3
 800070a:	b510      	push	{r4, lr}
 800070c:	4604      	mov	r4, r0
 800070e:	d001      	beq.n	8000714 <cleanup_stdio+0x10>
 8000710:	f000 fcb2 	bl	8001078 <_fflush_r>
 8000714:	68a1      	ldr	r1, [r4, #8]
 8000716:	4b09      	ldr	r3, [pc, #36]	@ (800073c <cleanup_stdio+0x38>)
 8000718:	4299      	cmp	r1, r3
 800071a:	d002      	beq.n	8000722 <cleanup_stdio+0x1e>
 800071c:	4620      	mov	r0, r4
 800071e:	f000 fcab 	bl	8001078 <_fflush_r>
 8000722:	68e1      	ldr	r1, [r4, #12]
 8000724:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <cleanup_stdio+0x3c>)
 8000726:	4299      	cmp	r1, r3
 8000728:	d004      	beq.n	8000734 <cleanup_stdio+0x30>
 800072a:	4620      	mov	r0, r4
 800072c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000730:	f000 bca2 	b.w	8001078 <_fflush_r>
 8000734:	bd10      	pop	{r4, pc}
 8000736:	bf00      	nop
 8000738:	20000080 	.word	0x20000080
 800073c:	200000e8 	.word	0x200000e8
 8000740:	20000150 	.word	0x20000150

08000744 <global_stdio_init.part.0>:
 8000744:	b510      	push	{r4, lr}
 8000746:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <global_stdio_init.part.0+0x30>)
 8000748:	4c0b      	ldr	r4, [pc, #44]	@ (8000778 <global_stdio_init.part.0+0x34>)
 800074a:	4a0c      	ldr	r2, [pc, #48]	@ (800077c <global_stdio_init.part.0+0x38>)
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	4620      	mov	r0, r4
 8000750:	2200      	movs	r2, #0
 8000752:	2104      	movs	r1, #4
 8000754:	f7ff ff94 	bl	8000680 <std>
 8000758:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800075c:	2201      	movs	r2, #1
 800075e:	2109      	movs	r1, #9
 8000760:	f7ff ff8e 	bl	8000680 <std>
 8000764:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000768:	2202      	movs	r2, #2
 800076a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800076e:	2112      	movs	r1, #18
 8000770:	f7ff bf86 	b.w	8000680 <std>
 8000774:	200001b8 	.word	0x200001b8
 8000778:	20000080 	.word	0x20000080
 800077c:	080006ed 	.word	0x080006ed

08000780 <__sfp_lock_acquire>:
 8000780:	4801      	ldr	r0, [pc, #4]	@ (8000788 <__sfp_lock_acquire+0x8>)
 8000782:	f000 b884 	b.w	800088e <__retarget_lock_acquire_recursive>
 8000786:	bf00      	nop
 8000788:	200001bd 	.word	0x200001bd

0800078c <__sfp_lock_release>:
 800078c:	4801      	ldr	r0, [pc, #4]	@ (8000794 <__sfp_lock_release+0x8>)
 800078e:	f000 b87f 	b.w	8000890 <__retarget_lock_release_recursive>
 8000792:	bf00      	nop
 8000794:	200001bd 	.word	0x200001bd

08000798 <__sinit>:
 8000798:	b510      	push	{r4, lr}
 800079a:	4604      	mov	r4, r0
 800079c:	f7ff fff0 	bl	8000780 <__sfp_lock_acquire>
 80007a0:	6a23      	ldr	r3, [r4, #32]
 80007a2:	b11b      	cbz	r3, 80007ac <__sinit+0x14>
 80007a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007a8:	f7ff bff0 	b.w	800078c <__sfp_lock_release>
 80007ac:	4b04      	ldr	r3, [pc, #16]	@ (80007c0 <__sinit+0x28>)
 80007ae:	6223      	str	r3, [r4, #32]
 80007b0:	4b04      	ldr	r3, [pc, #16]	@ (80007c4 <__sinit+0x2c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1f5      	bne.n	80007a4 <__sinit+0xc>
 80007b8:	f7ff ffc4 	bl	8000744 <global_stdio_init.part.0>
 80007bc:	e7f2      	b.n	80007a4 <__sinit+0xc>
 80007be:	bf00      	nop
 80007c0:	08000705 	.word	0x08000705
 80007c4:	200001b8 	.word	0x200001b8

080007c8 <_fwalk_sglue>:
 80007c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007cc:	4607      	mov	r7, r0
 80007ce:	4688      	mov	r8, r1
 80007d0:	4614      	mov	r4, r2
 80007d2:	2600      	movs	r6, #0
 80007d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80007d8:	f1b9 0901 	subs.w	r9, r9, #1
 80007dc:	d505      	bpl.n	80007ea <_fwalk_sglue+0x22>
 80007de:	6824      	ldr	r4, [r4, #0]
 80007e0:	2c00      	cmp	r4, #0
 80007e2:	d1f7      	bne.n	80007d4 <_fwalk_sglue+0xc>
 80007e4:	4630      	mov	r0, r6
 80007e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007ea:	89ab      	ldrh	r3, [r5, #12]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d907      	bls.n	8000800 <_fwalk_sglue+0x38>
 80007f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80007f4:	3301      	adds	r3, #1
 80007f6:	d003      	beq.n	8000800 <_fwalk_sglue+0x38>
 80007f8:	4629      	mov	r1, r5
 80007fa:	4638      	mov	r0, r7
 80007fc:	47c0      	blx	r8
 80007fe:	4306      	orrs	r6, r0
 8000800:	3568      	adds	r5, #104	@ 0x68
 8000802:	e7e9      	b.n	80007d8 <_fwalk_sglue+0x10>

08000804 <iprintf>:
 8000804:	b40f      	push	{r0, r1, r2, r3}
 8000806:	b507      	push	{r0, r1, r2, lr}
 8000808:	4906      	ldr	r1, [pc, #24]	@ (8000824 <iprintf+0x20>)
 800080a:	ab04      	add	r3, sp, #16
 800080c:	6808      	ldr	r0, [r1, #0]
 800080e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000812:	6881      	ldr	r1, [r0, #8]
 8000814:	9301      	str	r3, [sp, #4]
 8000816:	f000 f865 	bl	80008e4 <_vfiprintf_r>
 800081a:	b003      	add	sp, #12
 800081c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000820:	b004      	add	sp, #16
 8000822:	4770      	bx	lr
 8000824:	2000000c 	.word	0x2000000c

08000828 <memset>:
 8000828:	4402      	add	r2, r0
 800082a:	4603      	mov	r3, r0
 800082c:	4293      	cmp	r3, r2
 800082e:	d100      	bne.n	8000832 <memset+0xa>
 8000830:	4770      	bx	lr
 8000832:	f803 1b01 	strb.w	r1, [r3], #1
 8000836:	e7f9      	b.n	800082c <memset+0x4>

08000838 <__errno>:
 8000838:	4b01      	ldr	r3, [pc, #4]	@ (8000840 <__errno+0x8>)
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	2000000c 	.word	0x2000000c

08000844 <__libc_init_array>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	4d0d      	ldr	r5, [pc, #52]	@ (800087c <__libc_init_array+0x38>)
 8000848:	4c0d      	ldr	r4, [pc, #52]	@ (8000880 <__libc_init_array+0x3c>)
 800084a:	1b64      	subs	r4, r4, r5
 800084c:	10a4      	asrs	r4, r4, #2
 800084e:	2600      	movs	r6, #0
 8000850:	42a6      	cmp	r6, r4
 8000852:	d109      	bne.n	8000868 <__libc_init_array+0x24>
 8000854:	4d0b      	ldr	r5, [pc, #44]	@ (8000884 <__libc_init_array+0x40>)
 8000856:	4c0c      	ldr	r4, [pc, #48]	@ (8000888 <__libc_init_array+0x44>)
 8000858:	f000 fe3e 	bl	80014d8 <_init>
 800085c:	1b64      	subs	r4, r4, r5
 800085e:	10a4      	asrs	r4, r4, #2
 8000860:	2600      	movs	r6, #0
 8000862:	42a6      	cmp	r6, r4
 8000864:	d105      	bne.n	8000872 <__libc_init_array+0x2e>
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f855 3b04 	ldr.w	r3, [r5], #4
 800086c:	4798      	blx	r3
 800086e:	3601      	adds	r6, #1
 8000870:	e7ee      	b.n	8000850 <__libc_init_array+0xc>
 8000872:	f855 3b04 	ldr.w	r3, [r5], #4
 8000876:	4798      	blx	r3
 8000878:	3601      	adds	r6, #1
 800087a:	e7f2      	b.n	8000862 <__libc_init_array+0x1e>
 800087c:	08001540 	.word	0x08001540
 8000880:	08001540 	.word	0x08001540
 8000884:	08001540 	.word	0x08001540
 8000888:	08001544 	.word	0x08001544

0800088c <__retarget_lock_init_recursive>:
 800088c:	4770      	bx	lr

0800088e <__retarget_lock_acquire_recursive>:
 800088e:	4770      	bx	lr

08000890 <__retarget_lock_release_recursive>:
 8000890:	4770      	bx	lr

08000892 <__sfputc_r>:
 8000892:	6893      	ldr	r3, [r2, #8]
 8000894:	3b01      	subs	r3, #1
 8000896:	2b00      	cmp	r3, #0
 8000898:	b410      	push	{r4}
 800089a:	6093      	str	r3, [r2, #8]
 800089c:	da08      	bge.n	80008b0 <__sfputc_r+0x1e>
 800089e:	6994      	ldr	r4, [r2, #24]
 80008a0:	42a3      	cmp	r3, r4
 80008a2:	db01      	blt.n	80008a8 <__sfputc_r+0x16>
 80008a4:	290a      	cmp	r1, #10
 80008a6:	d103      	bne.n	80008b0 <__sfputc_r+0x1e>
 80008a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80008ac:	f000 bc5b 	b.w	8001166 <__swbuf_r>
 80008b0:	6813      	ldr	r3, [r2, #0]
 80008b2:	1c58      	adds	r0, r3, #1
 80008b4:	6010      	str	r0, [r2, #0]
 80008b6:	7019      	strb	r1, [r3, #0]
 80008b8:	4608      	mov	r0, r1
 80008ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <__sfputs_r>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	4606      	mov	r6, r0
 80008c4:	460f      	mov	r7, r1
 80008c6:	4614      	mov	r4, r2
 80008c8:	18d5      	adds	r5, r2, r3
 80008ca:	42ac      	cmp	r4, r5
 80008cc:	d101      	bne.n	80008d2 <__sfputs_r+0x12>
 80008ce:	2000      	movs	r0, #0
 80008d0:	e007      	b.n	80008e2 <__sfputs_r+0x22>
 80008d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80008d6:	463a      	mov	r2, r7
 80008d8:	4630      	mov	r0, r6
 80008da:	f7ff ffda 	bl	8000892 <__sfputc_r>
 80008de:	1c43      	adds	r3, r0, #1
 80008e0:	d1f3      	bne.n	80008ca <__sfputs_r+0xa>
 80008e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080008e4 <_vfiprintf_r>:
 80008e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008e8:	460d      	mov	r5, r1
 80008ea:	b09d      	sub	sp, #116	@ 0x74
 80008ec:	4614      	mov	r4, r2
 80008ee:	4698      	mov	r8, r3
 80008f0:	4606      	mov	r6, r0
 80008f2:	b118      	cbz	r0, 80008fc <_vfiprintf_r+0x18>
 80008f4:	6a03      	ldr	r3, [r0, #32]
 80008f6:	b90b      	cbnz	r3, 80008fc <_vfiprintf_r+0x18>
 80008f8:	f7ff ff4e 	bl	8000798 <__sinit>
 80008fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80008fe:	07d9      	lsls	r1, r3, #31
 8000900:	d405      	bmi.n	800090e <_vfiprintf_r+0x2a>
 8000902:	89ab      	ldrh	r3, [r5, #12]
 8000904:	059a      	lsls	r2, r3, #22
 8000906:	d402      	bmi.n	800090e <_vfiprintf_r+0x2a>
 8000908:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800090a:	f7ff ffc0 	bl	800088e <__retarget_lock_acquire_recursive>
 800090e:	89ab      	ldrh	r3, [r5, #12]
 8000910:	071b      	lsls	r3, r3, #28
 8000912:	d501      	bpl.n	8000918 <_vfiprintf_r+0x34>
 8000914:	692b      	ldr	r3, [r5, #16]
 8000916:	b99b      	cbnz	r3, 8000940 <_vfiprintf_r+0x5c>
 8000918:	4629      	mov	r1, r5
 800091a:	4630      	mov	r0, r6
 800091c:	f000 fc62 	bl	80011e4 <__swsetup_r>
 8000920:	b170      	cbz	r0, 8000940 <_vfiprintf_r+0x5c>
 8000922:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000924:	07dc      	lsls	r4, r3, #31
 8000926:	d504      	bpl.n	8000932 <_vfiprintf_r+0x4e>
 8000928:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800092c:	b01d      	add	sp, #116	@ 0x74
 800092e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000932:	89ab      	ldrh	r3, [r5, #12]
 8000934:	0598      	lsls	r0, r3, #22
 8000936:	d4f7      	bmi.n	8000928 <_vfiprintf_r+0x44>
 8000938:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800093a:	f7ff ffa9 	bl	8000890 <__retarget_lock_release_recursive>
 800093e:	e7f3      	b.n	8000928 <_vfiprintf_r+0x44>
 8000940:	2300      	movs	r3, #0
 8000942:	9309      	str	r3, [sp, #36]	@ 0x24
 8000944:	2320      	movs	r3, #32
 8000946:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800094a:	f8cd 800c 	str.w	r8, [sp, #12]
 800094e:	2330      	movs	r3, #48	@ 0x30
 8000950:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000b00 <_vfiprintf_r+0x21c>
 8000954:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000958:	f04f 0901 	mov.w	r9, #1
 800095c:	4623      	mov	r3, r4
 800095e:	469a      	mov	sl, r3
 8000960:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000964:	b10a      	cbz	r2, 800096a <_vfiprintf_r+0x86>
 8000966:	2a25      	cmp	r2, #37	@ 0x25
 8000968:	d1f9      	bne.n	800095e <_vfiprintf_r+0x7a>
 800096a:	ebba 0b04 	subs.w	fp, sl, r4
 800096e:	d00b      	beq.n	8000988 <_vfiprintf_r+0xa4>
 8000970:	465b      	mov	r3, fp
 8000972:	4622      	mov	r2, r4
 8000974:	4629      	mov	r1, r5
 8000976:	4630      	mov	r0, r6
 8000978:	f7ff ffa2 	bl	80008c0 <__sfputs_r>
 800097c:	3001      	adds	r0, #1
 800097e:	f000 80a7 	beq.w	8000ad0 <_vfiprintf_r+0x1ec>
 8000982:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000984:	445a      	add	r2, fp
 8000986:	9209      	str	r2, [sp, #36]	@ 0x24
 8000988:	f89a 3000 	ldrb.w	r3, [sl]
 800098c:	2b00      	cmp	r3, #0
 800098e:	f000 809f 	beq.w	8000ad0 <_vfiprintf_r+0x1ec>
 8000992:	2300      	movs	r3, #0
 8000994:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000998:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800099c:	f10a 0a01 	add.w	sl, sl, #1
 80009a0:	9304      	str	r3, [sp, #16]
 80009a2:	9307      	str	r3, [sp, #28]
 80009a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80009a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80009aa:	4654      	mov	r4, sl
 80009ac:	2205      	movs	r2, #5
 80009ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009b2:	4853      	ldr	r0, [pc, #332]	@ (8000b00 <_vfiprintf_r+0x21c>)
 80009b4:	f7ff fc14 	bl	80001e0 <memchr>
 80009b8:	9a04      	ldr	r2, [sp, #16]
 80009ba:	b9d8      	cbnz	r0, 80009f4 <_vfiprintf_r+0x110>
 80009bc:	06d1      	lsls	r1, r2, #27
 80009be:	bf44      	itt	mi
 80009c0:	2320      	movmi	r3, #32
 80009c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80009c6:	0713      	lsls	r3, r2, #28
 80009c8:	bf44      	itt	mi
 80009ca:	232b      	movmi	r3, #43	@ 0x2b
 80009cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80009d0:	f89a 3000 	ldrb.w	r3, [sl]
 80009d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80009d6:	d015      	beq.n	8000a04 <_vfiprintf_r+0x120>
 80009d8:	9a07      	ldr	r2, [sp, #28]
 80009da:	4654      	mov	r4, sl
 80009dc:	2000      	movs	r0, #0
 80009de:	f04f 0c0a 	mov.w	ip, #10
 80009e2:	4621      	mov	r1, r4
 80009e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80009e8:	3b30      	subs	r3, #48	@ 0x30
 80009ea:	2b09      	cmp	r3, #9
 80009ec:	d94b      	bls.n	8000a86 <_vfiprintf_r+0x1a2>
 80009ee:	b1b0      	cbz	r0, 8000a1e <_vfiprintf_r+0x13a>
 80009f0:	9207      	str	r2, [sp, #28]
 80009f2:	e014      	b.n	8000a1e <_vfiprintf_r+0x13a>
 80009f4:	eba0 0308 	sub.w	r3, r0, r8
 80009f8:	fa09 f303 	lsl.w	r3, r9, r3
 80009fc:	4313      	orrs	r3, r2
 80009fe:	9304      	str	r3, [sp, #16]
 8000a00:	46a2      	mov	sl, r4
 8000a02:	e7d2      	b.n	80009aa <_vfiprintf_r+0xc6>
 8000a04:	9b03      	ldr	r3, [sp, #12]
 8000a06:	1d19      	adds	r1, r3, #4
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	9103      	str	r1, [sp, #12]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	bfbb      	ittet	lt
 8000a10:	425b      	neglt	r3, r3
 8000a12:	f042 0202 	orrlt.w	r2, r2, #2
 8000a16:	9307      	strge	r3, [sp, #28]
 8000a18:	9307      	strlt	r3, [sp, #28]
 8000a1a:	bfb8      	it	lt
 8000a1c:	9204      	strlt	r2, [sp, #16]
 8000a1e:	7823      	ldrb	r3, [r4, #0]
 8000a20:	2b2e      	cmp	r3, #46	@ 0x2e
 8000a22:	d10a      	bne.n	8000a3a <_vfiprintf_r+0x156>
 8000a24:	7863      	ldrb	r3, [r4, #1]
 8000a26:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a28:	d132      	bne.n	8000a90 <_vfiprintf_r+0x1ac>
 8000a2a:	9b03      	ldr	r3, [sp, #12]
 8000a2c:	1d1a      	adds	r2, r3, #4
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	9203      	str	r2, [sp, #12]
 8000a32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000a36:	3402      	adds	r4, #2
 8000a38:	9305      	str	r3, [sp, #20]
 8000a3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000b10 <_vfiprintf_r+0x22c>
 8000a3e:	7821      	ldrb	r1, [r4, #0]
 8000a40:	2203      	movs	r2, #3
 8000a42:	4650      	mov	r0, sl
 8000a44:	f7ff fbcc 	bl	80001e0 <memchr>
 8000a48:	b138      	cbz	r0, 8000a5a <_vfiprintf_r+0x176>
 8000a4a:	9b04      	ldr	r3, [sp, #16]
 8000a4c:	eba0 000a 	sub.w	r0, r0, sl
 8000a50:	2240      	movs	r2, #64	@ 0x40
 8000a52:	4082      	lsls	r2, r0
 8000a54:	4313      	orrs	r3, r2
 8000a56:	3401      	adds	r4, #1
 8000a58:	9304      	str	r3, [sp, #16]
 8000a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a5e:	4829      	ldr	r0, [pc, #164]	@ (8000b04 <_vfiprintf_r+0x220>)
 8000a60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000a64:	2206      	movs	r2, #6
 8000a66:	f7ff fbbb 	bl	80001e0 <memchr>
 8000a6a:	2800      	cmp	r0, #0
 8000a6c:	d03f      	beq.n	8000aee <_vfiprintf_r+0x20a>
 8000a6e:	4b26      	ldr	r3, [pc, #152]	@ (8000b08 <_vfiprintf_r+0x224>)
 8000a70:	bb1b      	cbnz	r3, 8000aba <_vfiprintf_r+0x1d6>
 8000a72:	9b03      	ldr	r3, [sp, #12]
 8000a74:	3307      	adds	r3, #7
 8000a76:	f023 0307 	bic.w	r3, r3, #7
 8000a7a:	3308      	adds	r3, #8
 8000a7c:	9303      	str	r3, [sp, #12]
 8000a7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000a80:	443b      	add	r3, r7
 8000a82:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a84:	e76a      	b.n	800095c <_vfiprintf_r+0x78>
 8000a86:	fb0c 3202 	mla	r2, ip, r2, r3
 8000a8a:	460c      	mov	r4, r1
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	e7a8      	b.n	80009e2 <_vfiprintf_r+0xfe>
 8000a90:	2300      	movs	r3, #0
 8000a92:	3401      	adds	r4, #1
 8000a94:	9305      	str	r3, [sp, #20]
 8000a96:	4619      	mov	r1, r3
 8000a98:	f04f 0c0a 	mov.w	ip, #10
 8000a9c:	4620      	mov	r0, r4
 8000a9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000aa2:	3a30      	subs	r2, #48	@ 0x30
 8000aa4:	2a09      	cmp	r2, #9
 8000aa6:	d903      	bls.n	8000ab0 <_vfiprintf_r+0x1cc>
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d0c6      	beq.n	8000a3a <_vfiprintf_r+0x156>
 8000aac:	9105      	str	r1, [sp, #20]
 8000aae:	e7c4      	b.n	8000a3a <_vfiprintf_r+0x156>
 8000ab0:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e7f0      	b.n	8000a9c <_vfiprintf_r+0x1b8>
 8000aba:	ab03      	add	r3, sp, #12
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	462a      	mov	r2, r5
 8000ac0:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <_vfiprintf_r+0x228>)
 8000ac2:	a904      	add	r1, sp, #16
 8000ac4:	4630      	mov	r0, r6
 8000ac6:	f3af 8000 	nop.w
 8000aca:	4607      	mov	r7, r0
 8000acc:	1c78      	adds	r0, r7, #1
 8000ace:	d1d6      	bne.n	8000a7e <_vfiprintf_r+0x19a>
 8000ad0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000ad2:	07d9      	lsls	r1, r3, #31
 8000ad4:	d405      	bmi.n	8000ae2 <_vfiprintf_r+0x1fe>
 8000ad6:	89ab      	ldrh	r3, [r5, #12]
 8000ad8:	059a      	lsls	r2, r3, #22
 8000ada:	d402      	bmi.n	8000ae2 <_vfiprintf_r+0x1fe>
 8000adc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000ade:	f7ff fed7 	bl	8000890 <__retarget_lock_release_recursive>
 8000ae2:	89ab      	ldrh	r3, [r5, #12]
 8000ae4:	065b      	lsls	r3, r3, #25
 8000ae6:	f53f af1f 	bmi.w	8000928 <_vfiprintf_r+0x44>
 8000aea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000aec:	e71e      	b.n	800092c <_vfiprintf_r+0x48>
 8000aee:	ab03      	add	r3, sp, #12
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	462a      	mov	r2, r5
 8000af4:	4b05      	ldr	r3, [pc, #20]	@ (8000b0c <_vfiprintf_r+0x228>)
 8000af6:	a904      	add	r1, sp, #16
 8000af8:	4630      	mov	r0, r6
 8000afa:	f000 f91b 	bl	8000d34 <_printf_i>
 8000afe:	e7e4      	b.n	8000aca <_vfiprintf_r+0x1e6>
 8000b00:	08001504 	.word	0x08001504
 8000b04:	0800150e 	.word	0x0800150e
 8000b08:	00000000 	.word	0x00000000
 8000b0c:	080008c1 	.word	0x080008c1
 8000b10:	0800150a 	.word	0x0800150a

08000b14 <sbrk_aligned>:
 8000b14:	b570      	push	{r4, r5, r6, lr}
 8000b16:	4e0f      	ldr	r6, [pc, #60]	@ (8000b54 <sbrk_aligned+0x40>)
 8000b18:	460c      	mov	r4, r1
 8000b1a:	6831      	ldr	r1, [r6, #0]
 8000b1c:	4605      	mov	r5, r0
 8000b1e:	b911      	cbnz	r1, 8000b26 <sbrk_aligned+0x12>
 8000b20:	f000 fc4c 	bl	80013bc <_sbrk_r>
 8000b24:	6030      	str	r0, [r6, #0]
 8000b26:	4621      	mov	r1, r4
 8000b28:	4628      	mov	r0, r5
 8000b2a:	f000 fc47 	bl	80013bc <_sbrk_r>
 8000b2e:	1c43      	adds	r3, r0, #1
 8000b30:	d103      	bne.n	8000b3a <sbrk_aligned+0x26>
 8000b32:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000b36:	4620      	mov	r0, r4
 8000b38:	bd70      	pop	{r4, r5, r6, pc}
 8000b3a:	1cc4      	adds	r4, r0, #3
 8000b3c:	f024 0403 	bic.w	r4, r4, #3
 8000b40:	42a0      	cmp	r0, r4
 8000b42:	d0f8      	beq.n	8000b36 <sbrk_aligned+0x22>
 8000b44:	1a21      	subs	r1, r4, r0
 8000b46:	4628      	mov	r0, r5
 8000b48:	f000 fc38 	bl	80013bc <_sbrk_r>
 8000b4c:	3001      	adds	r0, #1
 8000b4e:	d1f2      	bne.n	8000b36 <sbrk_aligned+0x22>
 8000b50:	e7ef      	b.n	8000b32 <sbrk_aligned+0x1e>
 8000b52:	bf00      	nop
 8000b54:	200001c0 	.word	0x200001c0

08000b58 <_malloc_r>:
 8000b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b5c:	1ccd      	adds	r5, r1, #3
 8000b5e:	f025 0503 	bic.w	r5, r5, #3
 8000b62:	3508      	adds	r5, #8
 8000b64:	2d0c      	cmp	r5, #12
 8000b66:	bf38      	it	cc
 8000b68:	250c      	movcc	r5, #12
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	4606      	mov	r6, r0
 8000b6e:	db01      	blt.n	8000b74 <_malloc_r+0x1c>
 8000b70:	42a9      	cmp	r1, r5
 8000b72:	d904      	bls.n	8000b7e <_malloc_r+0x26>
 8000b74:	230c      	movs	r3, #12
 8000b76:	6033      	str	r3, [r6, #0]
 8000b78:	2000      	movs	r0, #0
 8000b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c54 <_malloc_r+0xfc>
 8000b82:	f000 faa1 	bl	80010c8 <__malloc_lock>
 8000b86:	f8d8 3000 	ldr.w	r3, [r8]
 8000b8a:	461c      	mov	r4, r3
 8000b8c:	bb44      	cbnz	r4, 8000be0 <_malloc_r+0x88>
 8000b8e:	4629      	mov	r1, r5
 8000b90:	4630      	mov	r0, r6
 8000b92:	f7ff ffbf 	bl	8000b14 <sbrk_aligned>
 8000b96:	1c43      	adds	r3, r0, #1
 8000b98:	4604      	mov	r4, r0
 8000b9a:	d158      	bne.n	8000c4e <_malloc_r+0xf6>
 8000b9c:	f8d8 4000 	ldr.w	r4, [r8]
 8000ba0:	4627      	mov	r7, r4
 8000ba2:	2f00      	cmp	r7, #0
 8000ba4:	d143      	bne.n	8000c2e <_malloc_r+0xd6>
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	d04b      	beq.n	8000c42 <_malloc_r+0xea>
 8000baa:	6823      	ldr	r3, [r4, #0]
 8000bac:	4639      	mov	r1, r7
 8000bae:	4630      	mov	r0, r6
 8000bb0:	eb04 0903 	add.w	r9, r4, r3
 8000bb4:	f000 fc02 	bl	80013bc <_sbrk_r>
 8000bb8:	4581      	cmp	r9, r0
 8000bba:	d142      	bne.n	8000c42 <_malloc_r+0xea>
 8000bbc:	6821      	ldr	r1, [r4, #0]
 8000bbe:	1a6d      	subs	r5, r5, r1
 8000bc0:	4629      	mov	r1, r5
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	f7ff ffa6 	bl	8000b14 <sbrk_aligned>
 8000bc8:	3001      	adds	r0, #1
 8000bca:	d03a      	beq.n	8000c42 <_malloc_r+0xea>
 8000bcc:	6823      	ldr	r3, [r4, #0]
 8000bce:	442b      	add	r3, r5
 8000bd0:	6023      	str	r3, [r4, #0]
 8000bd2:	f8d8 3000 	ldr.w	r3, [r8]
 8000bd6:	685a      	ldr	r2, [r3, #4]
 8000bd8:	bb62      	cbnz	r2, 8000c34 <_malloc_r+0xdc>
 8000bda:	f8c8 7000 	str.w	r7, [r8]
 8000bde:	e00f      	b.n	8000c00 <_malloc_r+0xa8>
 8000be0:	6822      	ldr	r2, [r4, #0]
 8000be2:	1b52      	subs	r2, r2, r5
 8000be4:	d420      	bmi.n	8000c28 <_malloc_r+0xd0>
 8000be6:	2a0b      	cmp	r2, #11
 8000be8:	d917      	bls.n	8000c1a <_malloc_r+0xc2>
 8000bea:	1961      	adds	r1, r4, r5
 8000bec:	42a3      	cmp	r3, r4
 8000bee:	6025      	str	r5, [r4, #0]
 8000bf0:	bf18      	it	ne
 8000bf2:	6059      	strne	r1, [r3, #4]
 8000bf4:	6863      	ldr	r3, [r4, #4]
 8000bf6:	bf08      	it	eq
 8000bf8:	f8c8 1000 	streq.w	r1, [r8]
 8000bfc:	5162      	str	r2, [r4, r5]
 8000bfe:	604b      	str	r3, [r1, #4]
 8000c00:	4630      	mov	r0, r6
 8000c02:	f000 fa67 	bl	80010d4 <__malloc_unlock>
 8000c06:	f104 000b 	add.w	r0, r4, #11
 8000c0a:	1d23      	adds	r3, r4, #4
 8000c0c:	f020 0007 	bic.w	r0, r0, #7
 8000c10:	1ac2      	subs	r2, r0, r3
 8000c12:	bf1c      	itt	ne
 8000c14:	1a1b      	subne	r3, r3, r0
 8000c16:	50a3      	strne	r3, [r4, r2]
 8000c18:	e7af      	b.n	8000b7a <_malloc_r+0x22>
 8000c1a:	6862      	ldr	r2, [r4, #4]
 8000c1c:	42a3      	cmp	r3, r4
 8000c1e:	bf0c      	ite	eq
 8000c20:	f8c8 2000 	streq.w	r2, [r8]
 8000c24:	605a      	strne	r2, [r3, #4]
 8000c26:	e7eb      	b.n	8000c00 <_malloc_r+0xa8>
 8000c28:	4623      	mov	r3, r4
 8000c2a:	6864      	ldr	r4, [r4, #4]
 8000c2c:	e7ae      	b.n	8000b8c <_malloc_r+0x34>
 8000c2e:	463c      	mov	r4, r7
 8000c30:	687f      	ldr	r7, [r7, #4]
 8000c32:	e7b6      	b.n	8000ba2 <_malloc_r+0x4a>
 8000c34:	461a      	mov	r2, r3
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	42a3      	cmp	r3, r4
 8000c3a:	d1fb      	bne.n	8000c34 <_malloc_r+0xdc>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	6053      	str	r3, [r2, #4]
 8000c40:	e7de      	b.n	8000c00 <_malloc_r+0xa8>
 8000c42:	230c      	movs	r3, #12
 8000c44:	6033      	str	r3, [r6, #0]
 8000c46:	4630      	mov	r0, r6
 8000c48:	f000 fa44 	bl	80010d4 <__malloc_unlock>
 8000c4c:	e794      	b.n	8000b78 <_malloc_r+0x20>
 8000c4e:	6005      	str	r5, [r0, #0]
 8000c50:	e7d6      	b.n	8000c00 <_malloc_r+0xa8>
 8000c52:	bf00      	nop
 8000c54:	200001c4 	.word	0x200001c4

08000c58 <_printf_common>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	4616      	mov	r6, r2
 8000c5e:	4698      	mov	r8, r3
 8000c60:	688a      	ldr	r2, [r1, #8]
 8000c62:	690b      	ldr	r3, [r1, #16]
 8000c64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	bfb8      	it	lt
 8000c6c:	4613      	movlt	r3, r2
 8000c6e:	6033      	str	r3, [r6, #0]
 8000c70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000c74:	4607      	mov	r7, r0
 8000c76:	460c      	mov	r4, r1
 8000c78:	b10a      	cbz	r2, 8000c7e <_printf_common+0x26>
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	6033      	str	r3, [r6, #0]
 8000c7e:	6823      	ldr	r3, [r4, #0]
 8000c80:	0699      	lsls	r1, r3, #26
 8000c82:	bf42      	ittt	mi
 8000c84:	6833      	ldrmi	r3, [r6, #0]
 8000c86:	3302      	addmi	r3, #2
 8000c88:	6033      	strmi	r3, [r6, #0]
 8000c8a:	6825      	ldr	r5, [r4, #0]
 8000c8c:	f015 0506 	ands.w	r5, r5, #6
 8000c90:	d106      	bne.n	8000ca0 <_printf_common+0x48>
 8000c92:	f104 0a19 	add.w	sl, r4, #25
 8000c96:	68e3      	ldr	r3, [r4, #12]
 8000c98:	6832      	ldr	r2, [r6, #0]
 8000c9a:	1a9b      	subs	r3, r3, r2
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	dc26      	bgt.n	8000cee <_printf_common+0x96>
 8000ca0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000ca4:	6822      	ldr	r2, [r4, #0]
 8000ca6:	3b00      	subs	r3, #0
 8000ca8:	bf18      	it	ne
 8000caa:	2301      	movne	r3, #1
 8000cac:	0692      	lsls	r2, r2, #26
 8000cae:	d42b      	bmi.n	8000d08 <_printf_common+0xb0>
 8000cb0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000cb4:	4641      	mov	r1, r8
 8000cb6:	4638      	mov	r0, r7
 8000cb8:	47c8      	blx	r9
 8000cba:	3001      	adds	r0, #1
 8000cbc:	d01e      	beq.n	8000cfc <_printf_common+0xa4>
 8000cbe:	6823      	ldr	r3, [r4, #0]
 8000cc0:	6922      	ldr	r2, [r4, #16]
 8000cc2:	f003 0306 	and.w	r3, r3, #6
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf02      	ittt	eq
 8000cca:	68e5      	ldreq	r5, [r4, #12]
 8000ccc:	6833      	ldreq	r3, [r6, #0]
 8000cce:	1aed      	subeq	r5, r5, r3
 8000cd0:	68a3      	ldr	r3, [r4, #8]
 8000cd2:	bf0c      	ite	eq
 8000cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000cd8:	2500      	movne	r5, #0
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	bfc4      	itt	gt
 8000cde:	1a9b      	subgt	r3, r3, r2
 8000ce0:	18ed      	addgt	r5, r5, r3
 8000ce2:	2600      	movs	r6, #0
 8000ce4:	341a      	adds	r4, #26
 8000ce6:	42b5      	cmp	r5, r6
 8000ce8:	d11a      	bne.n	8000d20 <_printf_common+0xc8>
 8000cea:	2000      	movs	r0, #0
 8000cec:	e008      	b.n	8000d00 <_printf_common+0xa8>
 8000cee:	2301      	movs	r3, #1
 8000cf0:	4652      	mov	r2, sl
 8000cf2:	4641      	mov	r1, r8
 8000cf4:	4638      	mov	r0, r7
 8000cf6:	47c8      	blx	r9
 8000cf8:	3001      	adds	r0, #1
 8000cfa:	d103      	bne.n	8000d04 <_printf_common+0xac>
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d04:	3501      	adds	r5, #1
 8000d06:	e7c6      	b.n	8000c96 <_printf_common+0x3e>
 8000d08:	18e1      	adds	r1, r4, r3
 8000d0a:	1c5a      	adds	r2, r3, #1
 8000d0c:	2030      	movs	r0, #48	@ 0x30
 8000d0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000d12:	4422      	add	r2, r4
 8000d14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000d18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000d1c:	3302      	adds	r3, #2
 8000d1e:	e7c7      	b.n	8000cb0 <_printf_common+0x58>
 8000d20:	2301      	movs	r3, #1
 8000d22:	4622      	mov	r2, r4
 8000d24:	4641      	mov	r1, r8
 8000d26:	4638      	mov	r0, r7
 8000d28:	47c8      	blx	r9
 8000d2a:	3001      	adds	r0, #1
 8000d2c:	d0e6      	beq.n	8000cfc <_printf_common+0xa4>
 8000d2e:	3601      	adds	r6, #1
 8000d30:	e7d9      	b.n	8000ce6 <_printf_common+0x8e>
	...

08000d34 <_printf_i>:
 8000d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	7e0f      	ldrb	r7, [r1, #24]
 8000d3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000d3c:	2f78      	cmp	r7, #120	@ 0x78
 8000d3e:	4691      	mov	r9, r2
 8000d40:	4680      	mov	r8, r0
 8000d42:	460c      	mov	r4, r1
 8000d44:	469a      	mov	sl, r3
 8000d46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000d4a:	d807      	bhi.n	8000d5c <_printf_i+0x28>
 8000d4c:	2f62      	cmp	r7, #98	@ 0x62
 8000d4e:	d80a      	bhi.n	8000d66 <_printf_i+0x32>
 8000d50:	2f00      	cmp	r7, #0
 8000d52:	f000 80d1 	beq.w	8000ef8 <_printf_i+0x1c4>
 8000d56:	2f58      	cmp	r7, #88	@ 0x58
 8000d58:	f000 80b8 	beq.w	8000ecc <_printf_i+0x198>
 8000d5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000d64:	e03a      	b.n	8000ddc <_printf_i+0xa8>
 8000d66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000d6a:	2b15      	cmp	r3, #21
 8000d6c:	d8f6      	bhi.n	8000d5c <_printf_i+0x28>
 8000d6e:	a101      	add	r1, pc, #4	@ (adr r1, 8000d74 <_printf_i+0x40>)
 8000d70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d74:	08000dcd 	.word	0x08000dcd
 8000d78:	08000de1 	.word	0x08000de1
 8000d7c:	08000d5d 	.word	0x08000d5d
 8000d80:	08000d5d 	.word	0x08000d5d
 8000d84:	08000d5d 	.word	0x08000d5d
 8000d88:	08000d5d 	.word	0x08000d5d
 8000d8c:	08000de1 	.word	0x08000de1
 8000d90:	08000d5d 	.word	0x08000d5d
 8000d94:	08000d5d 	.word	0x08000d5d
 8000d98:	08000d5d 	.word	0x08000d5d
 8000d9c:	08000d5d 	.word	0x08000d5d
 8000da0:	08000edf 	.word	0x08000edf
 8000da4:	08000e0b 	.word	0x08000e0b
 8000da8:	08000e99 	.word	0x08000e99
 8000dac:	08000d5d 	.word	0x08000d5d
 8000db0:	08000d5d 	.word	0x08000d5d
 8000db4:	08000f01 	.word	0x08000f01
 8000db8:	08000d5d 	.word	0x08000d5d
 8000dbc:	08000e0b 	.word	0x08000e0b
 8000dc0:	08000d5d 	.word	0x08000d5d
 8000dc4:	08000d5d 	.word	0x08000d5d
 8000dc8:	08000ea1 	.word	0x08000ea1
 8000dcc:	6833      	ldr	r3, [r6, #0]
 8000dce:	1d1a      	adds	r2, r3, #4
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	6032      	str	r2, [r6, #0]
 8000dd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000dd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e09c      	b.n	8000f1a <_printf_i+0x1e6>
 8000de0:	6833      	ldr	r3, [r6, #0]
 8000de2:	6820      	ldr	r0, [r4, #0]
 8000de4:	1d19      	adds	r1, r3, #4
 8000de6:	6031      	str	r1, [r6, #0]
 8000de8:	0606      	lsls	r6, r0, #24
 8000dea:	d501      	bpl.n	8000df0 <_printf_i+0xbc>
 8000dec:	681d      	ldr	r5, [r3, #0]
 8000dee:	e003      	b.n	8000df8 <_printf_i+0xc4>
 8000df0:	0645      	lsls	r5, r0, #25
 8000df2:	d5fb      	bpl.n	8000dec <_printf_i+0xb8>
 8000df4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	da03      	bge.n	8000e04 <_printf_i+0xd0>
 8000dfc:	232d      	movs	r3, #45	@ 0x2d
 8000dfe:	426d      	negs	r5, r5
 8000e00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e04:	4858      	ldr	r0, [pc, #352]	@ (8000f68 <_printf_i+0x234>)
 8000e06:	230a      	movs	r3, #10
 8000e08:	e011      	b.n	8000e2e <_printf_i+0xfa>
 8000e0a:	6821      	ldr	r1, [r4, #0]
 8000e0c:	6833      	ldr	r3, [r6, #0]
 8000e0e:	0608      	lsls	r0, r1, #24
 8000e10:	f853 5b04 	ldr.w	r5, [r3], #4
 8000e14:	d402      	bmi.n	8000e1c <_printf_i+0xe8>
 8000e16:	0649      	lsls	r1, r1, #25
 8000e18:	bf48      	it	mi
 8000e1a:	b2ad      	uxthmi	r5, r5
 8000e1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8000e1e:	4852      	ldr	r0, [pc, #328]	@ (8000f68 <_printf_i+0x234>)
 8000e20:	6033      	str	r3, [r6, #0]
 8000e22:	bf14      	ite	ne
 8000e24:	230a      	movne	r3, #10
 8000e26:	2308      	moveq	r3, #8
 8000e28:	2100      	movs	r1, #0
 8000e2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000e2e:	6866      	ldr	r6, [r4, #4]
 8000e30:	60a6      	str	r6, [r4, #8]
 8000e32:	2e00      	cmp	r6, #0
 8000e34:	db05      	blt.n	8000e42 <_printf_i+0x10e>
 8000e36:	6821      	ldr	r1, [r4, #0]
 8000e38:	432e      	orrs	r6, r5
 8000e3a:	f021 0104 	bic.w	r1, r1, #4
 8000e3e:	6021      	str	r1, [r4, #0]
 8000e40:	d04b      	beq.n	8000eda <_printf_i+0x1a6>
 8000e42:	4616      	mov	r6, r2
 8000e44:	fbb5 f1f3 	udiv	r1, r5, r3
 8000e48:	fb03 5711 	mls	r7, r3, r1, r5
 8000e4c:	5dc7      	ldrb	r7, [r0, r7]
 8000e4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000e52:	462f      	mov	r7, r5
 8000e54:	42bb      	cmp	r3, r7
 8000e56:	460d      	mov	r5, r1
 8000e58:	d9f4      	bls.n	8000e44 <_printf_i+0x110>
 8000e5a:	2b08      	cmp	r3, #8
 8000e5c:	d10b      	bne.n	8000e76 <_printf_i+0x142>
 8000e5e:	6823      	ldr	r3, [r4, #0]
 8000e60:	07df      	lsls	r7, r3, #31
 8000e62:	d508      	bpl.n	8000e76 <_printf_i+0x142>
 8000e64:	6923      	ldr	r3, [r4, #16]
 8000e66:	6861      	ldr	r1, [r4, #4]
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	bfde      	ittt	le
 8000e6c:	2330      	movle	r3, #48	@ 0x30
 8000e6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000e72:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000e76:	1b92      	subs	r2, r2, r6
 8000e78:	6122      	str	r2, [r4, #16]
 8000e7a:	f8cd a000 	str.w	sl, [sp]
 8000e7e:	464b      	mov	r3, r9
 8000e80:	aa03      	add	r2, sp, #12
 8000e82:	4621      	mov	r1, r4
 8000e84:	4640      	mov	r0, r8
 8000e86:	f7ff fee7 	bl	8000c58 <_printf_common>
 8000e8a:	3001      	adds	r0, #1
 8000e8c:	d14a      	bne.n	8000f24 <_printf_i+0x1f0>
 8000e8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e92:	b004      	add	sp, #16
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	6823      	ldr	r3, [r4, #0]
 8000e9a:	f043 0320 	orr.w	r3, r3, #32
 8000e9e:	6023      	str	r3, [r4, #0]
 8000ea0:	4832      	ldr	r0, [pc, #200]	@ (8000f6c <_printf_i+0x238>)
 8000ea2:	2778      	movs	r7, #120	@ 0x78
 8000ea4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000ea8:	6823      	ldr	r3, [r4, #0]
 8000eaa:	6831      	ldr	r1, [r6, #0]
 8000eac:	061f      	lsls	r7, r3, #24
 8000eae:	f851 5b04 	ldr.w	r5, [r1], #4
 8000eb2:	d402      	bmi.n	8000eba <_printf_i+0x186>
 8000eb4:	065f      	lsls	r7, r3, #25
 8000eb6:	bf48      	it	mi
 8000eb8:	b2ad      	uxthmi	r5, r5
 8000eba:	6031      	str	r1, [r6, #0]
 8000ebc:	07d9      	lsls	r1, r3, #31
 8000ebe:	bf44      	itt	mi
 8000ec0:	f043 0320 	orrmi.w	r3, r3, #32
 8000ec4:	6023      	strmi	r3, [r4, #0]
 8000ec6:	b11d      	cbz	r5, 8000ed0 <_printf_i+0x19c>
 8000ec8:	2310      	movs	r3, #16
 8000eca:	e7ad      	b.n	8000e28 <_printf_i+0xf4>
 8000ecc:	4826      	ldr	r0, [pc, #152]	@ (8000f68 <_printf_i+0x234>)
 8000ece:	e7e9      	b.n	8000ea4 <_printf_i+0x170>
 8000ed0:	6823      	ldr	r3, [r4, #0]
 8000ed2:	f023 0320 	bic.w	r3, r3, #32
 8000ed6:	6023      	str	r3, [r4, #0]
 8000ed8:	e7f6      	b.n	8000ec8 <_printf_i+0x194>
 8000eda:	4616      	mov	r6, r2
 8000edc:	e7bd      	b.n	8000e5a <_printf_i+0x126>
 8000ede:	6833      	ldr	r3, [r6, #0]
 8000ee0:	6825      	ldr	r5, [r4, #0]
 8000ee2:	6961      	ldr	r1, [r4, #20]
 8000ee4:	1d18      	adds	r0, r3, #4
 8000ee6:	6030      	str	r0, [r6, #0]
 8000ee8:	062e      	lsls	r6, r5, #24
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	d501      	bpl.n	8000ef2 <_printf_i+0x1be>
 8000eee:	6019      	str	r1, [r3, #0]
 8000ef0:	e002      	b.n	8000ef8 <_printf_i+0x1c4>
 8000ef2:	0668      	lsls	r0, r5, #25
 8000ef4:	d5fb      	bpl.n	8000eee <_printf_i+0x1ba>
 8000ef6:	8019      	strh	r1, [r3, #0]
 8000ef8:	2300      	movs	r3, #0
 8000efa:	6123      	str	r3, [r4, #16]
 8000efc:	4616      	mov	r6, r2
 8000efe:	e7bc      	b.n	8000e7a <_printf_i+0x146>
 8000f00:	6833      	ldr	r3, [r6, #0]
 8000f02:	1d1a      	adds	r2, r3, #4
 8000f04:	6032      	str	r2, [r6, #0]
 8000f06:	681e      	ldr	r6, [r3, #0]
 8000f08:	6862      	ldr	r2, [r4, #4]
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4630      	mov	r0, r6
 8000f0e:	f7ff f967 	bl	80001e0 <memchr>
 8000f12:	b108      	cbz	r0, 8000f18 <_printf_i+0x1e4>
 8000f14:	1b80      	subs	r0, r0, r6
 8000f16:	6060      	str	r0, [r4, #4]
 8000f18:	6863      	ldr	r3, [r4, #4]
 8000f1a:	6123      	str	r3, [r4, #16]
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f22:	e7aa      	b.n	8000e7a <_printf_i+0x146>
 8000f24:	6923      	ldr	r3, [r4, #16]
 8000f26:	4632      	mov	r2, r6
 8000f28:	4649      	mov	r1, r9
 8000f2a:	4640      	mov	r0, r8
 8000f2c:	47d0      	blx	sl
 8000f2e:	3001      	adds	r0, #1
 8000f30:	d0ad      	beq.n	8000e8e <_printf_i+0x15a>
 8000f32:	6823      	ldr	r3, [r4, #0]
 8000f34:	079b      	lsls	r3, r3, #30
 8000f36:	d413      	bmi.n	8000f60 <_printf_i+0x22c>
 8000f38:	68e0      	ldr	r0, [r4, #12]
 8000f3a:	9b03      	ldr	r3, [sp, #12]
 8000f3c:	4298      	cmp	r0, r3
 8000f3e:	bfb8      	it	lt
 8000f40:	4618      	movlt	r0, r3
 8000f42:	e7a6      	b.n	8000e92 <_printf_i+0x15e>
 8000f44:	2301      	movs	r3, #1
 8000f46:	4632      	mov	r2, r6
 8000f48:	4649      	mov	r1, r9
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	47d0      	blx	sl
 8000f4e:	3001      	adds	r0, #1
 8000f50:	d09d      	beq.n	8000e8e <_printf_i+0x15a>
 8000f52:	3501      	adds	r5, #1
 8000f54:	68e3      	ldr	r3, [r4, #12]
 8000f56:	9903      	ldr	r1, [sp, #12]
 8000f58:	1a5b      	subs	r3, r3, r1
 8000f5a:	42ab      	cmp	r3, r5
 8000f5c:	dcf2      	bgt.n	8000f44 <_printf_i+0x210>
 8000f5e:	e7eb      	b.n	8000f38 <_printf_i+0x204>
 8000f60:	2500      	movs	r5, #0
 8000f62:	f104 0619 	add.w	r6, r4, #25
 8000f66:	e7f5      	b.n	8000f54 <_printf_i+0x220>
 8000f68:	08001515 	.word	0x08001515
 8000f6c:	08001526 	.word	0x08001526

08000f70 <__sflush_r>:
 8000f70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f78:	0716      	lsls	r6, r2, #28
 8000f7a:	4605      	mov	r5, r0
 8000f7c:	460c      	mov	r4, r1
 8000f7e:	d454      	bmi.n	800102a <__sflush_r+0xba>
 8000f80:	684b      	ldr	r3, [r1, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	dc02      	bgt.n	8000f8c <__sflush_r+0x1c>
 8000f86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	dd48      	ble.n	800101e <__sflush_r+0xae>
 8000f8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000f8e:	2e00      	cmp	r6, #0
 8000f90:	d045      	beq.n	800101e <__sflush_r+0xae>
 8000f92:	2300      	movs	r3, #0
 8000f94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000f98:	682f      	ldr	r7, [r5, #0]
 8000f9a:	6a21      	ldr	r1, [r4, #32]
 8000f9c:	602b      	str	r3, [r5, #0]
 8000f9e:	d030      	beq.n	8001002 <__sflush_r+0x92>
 8000fa0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000fa2:	89a3      	ldrh	r3, [r4, #12]
 8000fa4:	0759      	lsls	r1, r3, #29
 8000fa6:	d505      	bpl.n	8000fb4 <__sflush_r+0x44>
 8000fa8:	6863      	ldr	r3, [r4, #4]
 8000faa:	1ad2      	subs	r2, r2, r3
 8000fac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000fae:	b10b      	cbz	r3, 8000fb4 <__sflush_r+0x44>
 8000fb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000fb2:	1ad2      	subs	r2, r2, r3
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000fb8:	6a21      	ldr	r1, [r4, #32]
 8000fba:	4628      	mov	r0, r5
 8000fbc:	47b0      	blx	r6
 8000fbe:	1c43      	adds	r3, r0, #1
 8000fc0:	89a3      	ldrh	r3, [r4, #12]
 8000fc2:	d106      	bne.n	8000fd2 <__sflush_r+0x62>
 8000fc4:	6829      	ldr	r1, [r5, #0]
 8000fc6:	291d      	cmp	r1, #29
 8000fc8:	d82b      	bhi.n	8001022 <__sflush_r+0xb2>
 8000fca:	4a2a      	ldr	r2, [pc, #168]	@ (8001074 <__sflush_r+0x104>)
 8000fcc:	40ca      	lsrs	r2, r1
 8000fce:	07d6      	lsls	r6, r2, #31
 8000fd0:	d527      	bpl.n	8001022 <__sflush_r+0xb2>
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	6062      	str	r2, [r4, #4]
 8000fd6:	04d9      	lsls	r1, r3, #19
 8000fd8:	6922      	ldr	r2, [r4, #16]
 8000fda:	6022      	str	r2, [r4, #0]
 8000fdc:	d504      	bpl.n	8000fe8 <__sflush_r+0x78>
 8000fde:	1c42      	adds	r2, r0, #1
 8000fe0:	d101      	bne.n	8000fe6 <__sflush_r+0x76>
 8000fe2:	682b      	ldr	r3, [r5, #0]
 8000fe4:	b903      	cbnz	r3, 8000fe8 <__sflush_r+0x78>
 8000fe6:	6560      	str	r0, [r4, #84]	@ 0x54
 8000fe8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000fea:	602f      	str	r7, [r5, #0]
 8000fec:	b1b9      	cbz	r1, 800101e <__sflush_r+0xae>
 8000fee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000ff2:	4299      	cmp	r1, r3
 8000ff4:	d002      	beq.n	8000ffc <__sflush_r+0x8c>
 8000ff6:	4628      	mov	r0, r5
 8000ff8:	f000 fa24 	bl	8001444 <_free_r>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	6363      	str	r3, [r4, #52]	@ 0x34
 8001000:	e00d      	b.n	800101e <__sflush_r+0xae>
 8001002:	2301      	movs	r3, #1
 8001004:	4628      	mov	r0, r5
 8001006:	47b0      	blx	r6
 8001008:	4602      	mov	r2, r0
 800100a:	1c50      	adds	r0, r2, #1
 800100c:	d1c9      	bne.n	8000fa2 <__sflush_r+0x32>
 800100e:	682b      	ldr	r3, [r5, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0c6      	beq.n	8000fa2 <__sflush_r+0x32>
 8001014:	2b1d      	cmp	r3, #29
 8001016:	d001      	beq.n	800101c <__sflush_r+0xac>
 8001018:	2b16      	cmp	r3, #22
 800101a:	d11e      	bne.n	800105a <__sflush_r+0xea>
 800101c:	602f      	str	r7, [r5, #0]
 800101e:	2000      	movs	r0, #0
 8001020:	e022      	b.n	8001068 <__sflush_r+0xf8>
 8001022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001026:	b21b      	sxth	r3, r3
 8001028:	e01b      	b.n	8001062 <__sflush_r+0xf2>
 800102a:	690f      	ldr	r7, [r1, #16]
 800102c:	2f00      	cmp	r7, #0
 800102e:	d0f6      	beq.n	800101e <__sflush_r+0xae>
 8001030:	0793      	lsls	r3, r2, #30
 8001032:	680e      	ldr	r6, [r1, #0]
 8001034:	bf08      	it	eq
 8001036:	694b      	ldreq	r3, [r1, #20]
 8001038:	600f      	str	r7, [r1, #0]
 800103a:	bf18      	it	ne
 800103c:	2300      	movne	r3, #0
 800103e:	eba6 0807 	sub.w	r8, r6, r7
 8001042:	608b      	str	r3, [r1, #8]
 8001044:	f1b8 0f00 	cmp.w	r8, #0
 8001048:	dde9      	ble.n	800101e <__sflush_r+0xae>
 800104a:	6a21      	ldr	r1, [r4, #32]
 800104c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800104e:	4643      	mov	r3, r8
 8001050:	463a      	mov	r2, r7
 8001052:	4628      	mov	r0, r5
 8001054:	47b0      	blx	r6
 8001056:	2800      	cmp	r0, #0
 8001058:	dc08      	bgt.n	800106c <__sflush_r+0xfc>
 800105a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800105e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001062:	81a3      	strh	r3, [r4, #12]
 8001064:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800106c:	4407      	add	r7, r0
 800106e:	eba8 0800 	sub.w	r8, r8, r0
 8001072:	e7e7      	b.n	8001044 <__sflush_r+0xd4>
 8001074:	20400001 	.word	0x20400001

08001078 <_fflush_r>:
 8001078:	b538      	push	{r3, r4, r5, lr}
 800107a:	690b      	ldr	r3, [r1, #16]
 800107c:	4605      	mov	r5, r0
 800107e:	460c      	mov	r4, r1
 8001080:	b913      	cbnz	r3, 8001088 <_fflush_r+0x10>
 8001082:	2500      	movs	r5, #0
 8001084:	4628      	mov	r0, r5
 8001086:	bd38      	pop	{r3, r4, r5, pc}
 8001088:	b118      	cbz	r0, 8001092 <_fflush_r+0x1a>
 800108a:	6a03      	ldr	r3, [r0, #32]
 800108c:	b90b      	cbnz	r3, 8001092 <_fflush_r+0x1a>
 800108e:	f7ff fb83 	bl	8000798 <__sinit>
 8001092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0f3      	beq.n	8001082 <_fflush_r+0xa>
 800109a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800109c:	07d0      	lsls	r0, r2, #31
 800109e:	d404      	bmi.n	80010aa <_fflush_r+0x32>
 80010a0:	0599      	lsls	r1, r3, #22
 80010a2:	d402      	bmi.n	80010aa <_fflush_r+0x32>
 80010a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80010a6:	f7ff fbf2 	bl	800088e <__retarget_lock_acquire_recursive>
 80010aa:	4628      	mov	r0, r5
 80010ac:	4621      	mov	r1, r4
 80010ae:	f7ff ff5f 	bl	8000f70 <__sflush_r>
 80010b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80010b4:	07da      	lsls	r2, r3, #31
 80010b6:	4605      	mov	r5, r0
 80010b8:	d4e4      	bmi.n	8001084 <_fflush_r+0xc>
 80010ba:	89a3      	ldrh	r3, [r4, #12]
 80010bc:	059b      	lsls	r3, r3, #22
 80010be:	d4e1      	bmi.n	8001084 <_fflush_r+0xc>
 80010c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80010c2:	f7ff fbe5 	bl	8000890 <__retarget_lock_release_recursive>
 80010c6:	e7dd      	b.n	8001084 <_fflush_r+0xc>

080010c8 <__malloc_lock>:
 80010c8:	4801      	ldr	r0, [pc, #4]	@ (80010d0 <__malloc_lock+0x8>)
 80010ca:	f7ff bbe0 	b.w	800088e <__retarget_lock_acquire_recursive>
 80010ce:	bf00      	nop
 80010d0:	200001bc 	.word	0x200001bc

080010d4 <__malloc_unlock>:
 80010d4:	4801      	ldr	r0, [pc, #4]	@ (80010dc <__malloc_unlock+0x8>)
 80010d6:	f7ff bbdb 	b.w	8000890 <__retarget_lock_release_recursive>
 80010da:	bf00      	nop
 80010dc:	200001bc 	.word	0x200001bc

080010e0 <__sread>:
 80010e0:	b510      	push	{r4, lr}
 80010e2:	460c      	mov	r4, r1
 80010e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010e8:	f000 f956 	bl	8001398 <_read_r>
 80010ec:	2800      	cmp	r0, #0
 80010ee:	bfab      	itete	ge
 80010f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80010f2:	89a3      	ldrhlt	r3, [r4, #12]
 80010f4:	181b      	addge	r3, r3, r0
 80010f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80010fa:	bfac      	ite	ge
 80010fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80010fe:	81a3      	strhlt	r3, [r4, #12]
 8001100:	bd10      	pop	{r4, pc}

08001102 <__swrite>:
 8001102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001106:	461f      	mov	r7, r3
 8001108:	898b      	ldrh	r3, [r1, #12]
 800110a:	05db      	lsls	r3, r3, #23
 800110c:	4605      	mov	r5, r0
 800110e:	460c      	mov	r4, r1
 8001110:	4616      	mov	r6, r2
 8001112:	d505      	bpl.n	8001120 <__swrite+0x1e>
 8001114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001118:	2302      	movs	r3, #2
 800111a:	2200      	movs	r2, #0
 800111c:	f000 f92a 	bl	8001374 <_lseek_r>
 8001120:	89a3      	ldrh	r3, [r4, #12]
 8001122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001126:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800112a:	81a3      	strh	r3, [r4, #12]
 800112c:	4632      	mov	r2, r6
 800112e:	463b      	mov	r3, r7
 8001130:	4628      	mov	r0, r5
 8001132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001136:	f000 b951 	b.w	80013dc <_write_r>

0800113a <__sseek>:
 800113a:	b510      	push	{r4, lr}
 800113c:	460c      	mov	r4, r1
 800113e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001142:	f000 f917 	bl	8001374 <_lseek_r>
 8001146:	1c43      	adds	r3, r0, #1
 8001148:	89a3      	ldrh	r3, [r4, #12]
 800114a:	bf15      	itete	ne
 800114c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800114e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001152:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001156:	81a3      	strheq	r3, [r4, #12]
 8001158:	bf18      	it	ne
 800115a:	81a3      	strhne	r3, [r4, #12]
 800115c:	bd10      	pop	{r4, pc}

0800115e <__sclose>:
 800115e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001162:	f000 b94d 	b.w	8001400 <_close_r>

08001166 <__swbuf_r>:
 8001166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001168:	460e      	mov	r6, r1
 800116a:	4614      	mov	r4, r2
 800116c:	4605      	mov	r5, r0
 800116e:	b118      	cbz	r0, 8001178 <__swbuf_r+0x12>
 8001170:	6a03      	ldr	r3, [r0, #32]
 8001172:	b90b      	cbnz	r3, 8001178 <__swbuf_r+0x12>
 8001174:	f7ff fb10 	bl	8000798 <__sinit>
 8001178:	69a3      	ldr	r3, [r4, #24]
 800117a:	60a3      	str	r3, [r4, #8]
 800117c:	89a3      	ldrh	r3, [r4, #12]
 800117e:	071a      	lsls	r2, r3, #28
 8001180:	d501      	bpl.n	8001186 <__swbuf_r+0x20>
 8001182:	6923      	ldr	r3, [r4, #16]
 8001184:	b943      	cbnz	r3, 8001198 <__swbuf_r+0x32>
 8001186:	4621      	mov	r1, r4
 8001188:	4628      	mov	r0, r5
 800118a:	f000 f82b 	bl	80011e4 <__swsetup_r>
 800118e:	b118      	cbz	r0, 8001198 <__swbuf_r+0x32>
 8001190:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001194:	4638      	mov	r0, r7
 8001196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001198:	6823      	ldr	r3, [r4, #0]
 800119a:	6922      	ldr	r2, [r4, #16]
 800119c:	1a98      	subs	r0, r3, r2
 800119e:	6963      	ldr	r3, [r4, #20]
 80011a0:	b2f6      	uxtb	r6, r6
 80011a2:	4283      	cmp	r3, r0
 80011a4:	4637      	mov	r7, r6
 80011a6:	dc05      	bgt.n	80011b4 <__swbuf_r+0x4e>
 80011a8:	4621      	mov	r1, r4
 80011aa:	4628      	mov	r0, r5
 80011ac:	f7ff ff64 	bl	8001078 <_fflush_r>
 80011b0:	2800      	cmp	r0, #0
 80011b2:	d1ed      	bne.n	8001190 <__swbuf_r+0x2a>
 80011b4:	68a3      	ldr	r3, [r4, #8]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	60a3      	str	r3, [r4, #8]
 80011ba:	6823      	ldr	r3, [r4, #0]
 80011bc:	1c5a      	adds	r2, r3, #1
 80011be:	6022      	str	r2, [r4, #0]
 80011c0:	701e      	strb	r6, [r3, #0]
 80011c2:	6962      	ldr	r2, [r4, #20]
 80011c4:	1c43      	adds	r3, r0, #1
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d004      	beq.n	80011d4 <__swbuf_r+0x6e>
 80011ca:	89a3      	ldrh	r3, [r4, #12]
 80011cc:	07db      	lsls	r3, r3, #31
 80011ce:	d5e1      	bpl.n	8001194 <__swbuf_r+0x2e>
 80011d0:	2e0a      	cmp	r6, #10
 80011d2:	d1df      	bne.n	8001194 <__swbuf_r+0x2e>
 80011d4:	4621      	mov	r1, r4
 80011d6:	4628      	mov	r0, r5
 80011d8:	f7ff ff4e 	bl	8001078 <_fflush_r>
 80011dc:	2800      	cmp	r0, #0
 80011de:	d0d9      	beq.n	8001194 <__swbuf_r+0x2e>
 80011e0:	e7d6      	b.n	8001190 <__swbuf_r+0x2a>
	...

080011e4 <__swsetup_r>:
 80011e4:	b538      	push	{r3, r4, r5, lr}
 80011e6:	4b29      	ldr	r3, [pc, #164]	@ (800128c <__swsetup_r+0xa8>)
 80011e8:	4605      	mov	r5, r0
 80011ea:	6818      	ldr	r0, [r3, #0]
 80011ec:	460c      	mov	r4, r1
 80011ee:	b118      	cbz	r0, 80011f8 <__swsetup_r+0x14>
 80011f0:	6a03      	ldr	r3, [r0, #32]
 80011f2:	b90b      	cbnz	r3, 80011f8 <__swsetup_r+0x14>
 80011f4:	f7ff fad0 	bl	8000798 <__sinit>
 80011f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011fc:	0719      	lsls	r1, r3, #28
 80011fe:	d422      	bmi.n	8001246 <__swsetup_r+0x62>
 8001200:	06da      	lsls	r2, r3, #27
 8001202:	d407      	bmi.n	8001214 <__swsetup_r+0x30>
 8001204:	2209      	movs	r2, #9
 8001206:	602a      	str	r2, [r5, #0]
 8001208:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800120c:	81a3      	strh	r3, [r4, #12]
 800120e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001212:	e033      	b.n	800127c <__swsetup_r+0x98>
 8001214:	0758      	lsls	r0, r3, #29
 8001216:	d512      	bpl.n	800123e <__swsetup_r+0x5a>
 8001218:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800121a:	b141      	cbz	r1, 800122e <__swsetup_r+0x4a>
 800121c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001220:	4299      	cmp	r1, r3
 8001222:	d002      	beq.n	800122a <__swsetup_r+0x46>
 8001224:	4628      	mov	r0, r5
 8001226:	f000 f90d 	bl	8001444 <_free_r>
 800122a:	2300      	movs	r3, #0
 800122c:	6363      	str	r3, [r4, #52]	@ 0x34
 800122e:	89a3      	ldrh	r3, [r4, #12]
 8001230:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001234:	81a3      	strh	r3, [r4, #12]
 8001236:	2300      	movs	r3, #0
 8001238:	6063      	str	r3, [r4, #4]
 800123a:	6923      	ldr	r3, [r4, #16]
 800123c:	6023      	str	r3, [r4, #0]
 800123e:	89a3      	ldrh	r3, [r4, #12]
 8001240:	f043 0308 	orr.w	r3, r3, #8
 8001244:	81a3      	strh	r3, [r4, #12]
 8001246:	6923      	ldr	r3, [r4, #16]
 8001248:	b94b      	cbnz	r3, 800125e <__swsetup_r+0x7a>
 800124a:	89a3      	ldrh	r3, [r4, #12]
 800124c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001250:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001254:	d003      	beq.n	800125e <__swsetup_r+0x7a>
 8001256:	4621      	mov	r1, r4
 8001258:	4628      	mov	r0, r5
 800125a:	f000 f83f 	bl	80012dc <__smakebuf_r>
 800125e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001262:	f013 0201 	ands.w	r2, r3, #1
 8001266:	d00a      	beq.n	800127e <__swsetup_r+0x9a>
 8001268:	2200      	movs	r2, #0
 800126a:	60a2      	str	r2, [r4, #8]
 800126c:	6962      	ldr	r2, [r4, #20]
 800126e:	4252      	negs	r2, r2
 8001270:	61a2      	str	r2, [r4, #24]
 8001272:	6922      	ldr	r2, [r4, #16]
 8001274:	b942      	cbnz	r2, 8001288 <__swsetup_r+0xa4>
 8001276:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800127a:	d1c5      	bne.n	8001208 <__swsetup_r+0x24>
 800127c:	bd38      	pop	{r3, r4, r5, pc}
 800127e:	0799      	lsls	r1, r3, #30
 8001280:	bf58      	it	pl
 8001282:	6962      	ldrpl	r2, [r4, #20]
 8001284:	60a2      	str	r2, [r4, #8]
 8001286:	e7f4      	b.n	8001272 <__swsetup_r+0x8e>
 8001288:	2000      	movs	r0, #0
 800128a:	e7f7      	b.n	800127c <__swsetup_r+0x98>
 800128c:	2000000c 	.word	0x2000000c

08001290 <__swhatbuf_r>:
 8001290:	b570      	push	{r4, r5, r6, lr}
 8001292:	460c      	mov	r4, r1
 8001294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001298:	2900      	cmp	r1, #0
 800129a:	b096      	sub	sp, #88	@ 0x58
 800129c:	4615      	mov	r5, r2
 800129e:	461e      	mov	r6, r3
 80012a0:	da0d      	bge.n	80012be <__swhatbuf_r+0x2e>
 80012a2:	89a3      	ldrh	r3, [r4, #12]
 80012a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80012a8:	f04f 0100 	mov.w	r1, #0
 80012ac:	bf14      	ite	ne
 80012ae:	2340      	movne	r3, #64	@ 0x40
 80012b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80012b4:	2000      	movs	r0, #0
 80012b6:	6031      	str	r1, [r6, #0]
 80012b8:	602b      	str	r3, [r5, #0]
 80012ba:	b016      	add	sp, #88	@ 0x58
 80012bc:	bd70      	pop	{r4, r5, r6, pc}
 80012be:	466a      	mov	r2, sp
 80012c0:	f000 f8ae 	bl	8001420 <_fstat_r>
 80012c4:	2800      	cmp	r0, #0
 80012c6:	dbec      	blt.n	80012a2 <__swhatbuf_r+0x12>
 80012c8:	9901      	ldr	r1, [sp, #4]
 80012ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80012ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80012d2:	4259      	negs	r1, r3
 80012d4:	4159      	adcs	r1, r3
 80012d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012da:	e7eb      	b.n	80012b4 <__swhatbuf_r+0x24>

080012dc <__smakebuf_r>:
 80012dc:	898b      	ldrh	r3, [r1, #12]
 80012de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80012e0:	079d      	lsls	r5, r3, #30
 80012e2:	4606      	mov	r6, r0
 80012e4:	460c      	mov	r4, r1
 80012e6:	d507      	bpl.n	80012f8 <__smakebuf_r+0x1c>
 80012e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80012ec:	6023      	str	r3, [r4, #0]
 80012ee:	6123      	str	r3, [r4, #16]
 80012f0:	2301      	movs	r3, #1
 80012f2:	6163      	str	r3, [r4, #20]
 80012f4:	b003      	add	sp, #12
 80012f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012f8:	ab01      	add	r3, sp, #4
 80012fa:	466a      	mov	r2, sp
 80012fc:	f7ff ffc8 	bl	8001290 <__swhatbuf_r>
 8001300:	9f00      	ldr	r7, [sp, #0]
 8001302:	4605      	mov	r5, r0
 8001304:	4639      	mov	r1, r7
 8001306:	4630      	mov	r0, r6
 8001308:	f7ff fc26 	bl	8000b58 <_malloc_r>
 800130c:	b948      	cbnz	r0, 8001322 <__smakebuf_r+0x46>
 800130e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001312:	059a      	lsls	r2, r3, #22
 8001314:	d4ee      	bmi.n	80012f4 <__smakebuf_r+0x18>
 8001316:	f023 0303 	bic.w	r3, r3, #3
 800131a:	f043 0302 	orr.w	r3, r3, #2
 800131e:	81a3      	strh	r3, [r4, #12]
 8001320:	e7e2      	b.n	80012e8 <__smakebuf_r+0xc>
 8001322:	89a3      	ldrh	r3, [r4, #12]
 8001324:	6020      	str	r0, [r4, #0]
 8001326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800132a:	81a3      	strh	r3, [r4, #12]
 800132c:	9b01      	ldr	r3, [sp, #4]
 800132e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001332:	b15b      	cbz	r3, 800134c <__smakebuf_r+0x70>
 8001334:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001338:	4630      	mov	r0, r6
 800133a:	f000 f80b 	bl	8001354 <_isatty_r>
 800133e:	b128      	cbz	r0, 800134c <__smakebuf_r+0x70>
 8001340:	89a3      	ldrh	r3, [r4, #12]
 8001342:	f023 0303 	bic.w	r3, r3, #3
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	81a3      	strh	r3, [r4, #12]
 800134c:	89a3      	ldrh	r3, [r4, #12]
 800134e:	431d      	orrs	r5, r3
 8001350:	81a5      	strh	r5, [r4, #12]
 8001352:	e7cf      	b.n	80012f4 <__smakebuf_r+0x18>

08001354 <_isatty_r>:
 8001354:	b538      	push	{r3, r4, r5, lr}
 8001356:	4d06      	ldr	r5, [pc, #24]	@ (8001370 <_isatty_r+0x1c>)
 8001358:	2300      	movs	r3, #0
 800135a:	4604      	mov	r4, r0
 800135c:	4608      	mov	r0, r1
 800135e:	602b      	str	r3, [r5, #0]
 8001360:	f7ff f87f 	bl	8000462 <_isatty>
 8001364:	1c43      	adds	r3, r0, #1
 8001366:	d102      	bne.n	800136e <_isatty_r+0x1a>
 8001368:	682b      	ldr	r3, [r5, #0]
 800136a:	b103      	cbz	r3, 800136e <_isatty_r+0x1a>
 800136c:	6023      	str	r3, [r4, #0]
 800136e:	bd38      	pop	{r3, r4, r5, pc}
 8001370:	200001c8 	.word	0x200001c8

08001374 <_lseek_r>:
 8001374:	b538      	push	{r3, r4, r5, lr}
 8001376:	4d07      	ldr	r5, [pc, #28]	@ (8001394 <_lseek_r+0x20>)
 8001378:	4604      	mov	r4, r0
 800137a:	4608      	mov	r0, r1
 800137c:	4611      	mov	r1, r2
 800137e:	2200      	movs	r2, #0
 8001380:	602a      	str	r2, [r5, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	f7ff f878 	bl	8000478 <_lseek>
 8001388:	1c43      	adds	r3, r0, #1
 800138a:	d102      	bne.n	8001392 <_lseek_r+0x1e>
 800138c:	682b      	ldr	r3, [r5, #0]
 800138e:	b103      	cbz	r3, 8001392 <_lseek_r+0x1e>
 8001390:	6023      	str	r3, [r4, #0]
 8001392:	bd38      	pop	{r3, r4, r5, pc}
 8001394:	200001c8 	.word	0x200001c8

08001398 <_read_r>:
 8001398:	b538      	push	{r3, r4, r5, lr}
 800139a:	4d07      	ldr	r5, [pc, #28]	@ (80013b8 <_read_r+0x20>)
 800139c:	4604      	mov	r4, r0
 800139e:	4608      	mov	r0, r1
 80013a0:	4611      	mov	r1, r2
 80013a2:	2200      	movs	r2, #0
 80013a4:	602a      	str	r2, [r5, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	f7ff f806 	bl	80003b8 <_read>
 80013ac:	1c43      	adds	r3, r0, #1
 80013ae:	d102      	bne.n	80013b6 <_read_r+0x1e>
 80013b0:	682b      	ldr	r3, [r5, #0]
 80013b2:	b103      	cbz	r3, 80013b6 <_read_r+0x1e>
 80013b4:	6023      	str	r3, [r4, #0]
 80013b6:	bd38      	pop	{r3, r4, r5, pc}
 80013b8:	200001c8 	.word	0x200001c8

080013bc <_sbrk_r>:
 80013bc:	b538      	push	{r3, r4, r5, lr}
 80013be:	4d06      	ldr	r5, [pc, #24]	@ (80013d8 <_sbrk_r+0x1c>)
 80013c0:	2300      	movs	r3, #0
 80013c2:	4604      	mov	r4, r0
 80013c4:	4608      	mov	r0, r1
 80013c6:	602b      	str	r3, [r5, #0]
 80013c8:	f7ff f864 	bl	8000494 <_sbrk>
 80013cc:	1c43      	adds	r3, r0, #1
 80013ce:	d102      	bne.n	80013d6 <_sbrk_r+0x1a>
 80013d0:	682b      	ldr	r3, [r5, #0]
 80013d2:	b103      	cbz	r3, 80013d6 <_sbrk_r+0x1a>
 80013d4:	6023      	str	r3, [r4, #0]
 80013d6:	bd38      	pop	{r3, r4, r5, pc}
 80013d8:	200001c8 	.word	0x200001c8

080013dc <_write_r>:
 80013dc:	b538      	push	{r3, r4, r5, lr}
 80013de:	4d07      	ldr	r5, [pc, #28]	@ (80013fc <_write_r+0x20>)
 80013e0:	4604      	mov	r4, r0
 80013e2:	4608      	mov	r0, r1
 80013e4:	4611      	mov	r1, r2
 80013e6:	2200      	movs	r2, #0
 80013e8:	602a      	str	r2, [r5, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	f7ff f801 	bl	80003f2 <_write>
 80013f0:	1c43      	adds	r3, r0, #1
 80013f2:	d102      	bne.n	80013fa <_write_r+0x1e>
 80013f4:	682b      	ldr	r3, [r5, #0]
 80013f6:	b103      	cbz	r3, 80013fa <_write_r+0x1e>
 80013f8:	6023      	str	r3, [r4, #0]
 80013fa:	bd38      	pop	{r3, r4, r5, pc}
 80013fc:	200001c8 	.word	0x200001c8

08001400 <_close_r>:
 8001400:	b538      	push	{r3, r4, r5, lr}
 8001402:	4d06      	ldr	r5, [pc, #24]	@ (800141c <_close_r+0x1c>)
 8001404:	2300      	movs	r3, #0
 8001406:	4604      	mov	r4, r0
 8001408:	4608      	mov	r0, r1
 800140a:	602b      	str	r3, [r5, #0]
 800140c:	f7ff f80d 	bl	800042a <_close>
 8001410:	1c43      	adds	r3, r0, #1
 8001412:	d102      	bne.n	800141a <_close_r+0x1a>
 8001414:	682b      	ldr	r3, [r5, #0]
 8001416:	b103      	cbz	r3, 800141a <_close_r+0x1a>
 8001418:	6023      	str	r3, [r4, #0]
 800141a:	bd38      	pop	{r3, r4, r5, pc}
 800141c:	200001c8 	.word	0x200001c8

08001420 <_fstat_r>:
 8001420:	b538      	push	{r3, r4, r5, lr}
 8001422:	4d07      	ldr	r5, [pc, #28]	@ (8001440 <_fstat_r+0x20>)
 8001424:	2300      	movs	r3, #0
 8001426:	4604      	mov	r4, r0
 8001428:	4608      	mov	r0, r1
 800142a:	4611      	mov	r1, r2
 800142c:	602b      	str	r3, [r5, #0]
 800142e:	f7ff f808 	bl	8000442 <_fstat>
 8001432:	1c43      	adds	r3, r0, #1
 8001434:	d102      	bne.n	800143c <_fstat_r+0x1c>
 8001436:	682b      	ldr	r3, [r5, #0]
 8001438:	b103      	cbz	r3, 800143c <_fstat_r+0x1c>
 800143a:	6023      	str	r3, [r4, #0]
 800143c:	bd38      	pop	{r3, r4, r5, pc}
 800143e:	bf00      	nop
 8001440:	200001c8 	.word	0x200001c8

08001444 <_free_r>:
 8001444:	b538      	push	{r3, r4, r5, lr}
 8001446:	4605      	mov	r5, r0
 8001448:	2900      	cmp	r1, #0
 800144a:	d041      	beq.n	80014d0 <_free_r+0x8c>
 800144c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001450:	1f0c      	subs	r4, r1, #4
 8001452:	2b00      	cmp	r3, #0
 8001454:	bfb8      	it	lt
 8001456:	18e4      	addlt	r4, r4, r3
 8001458:	f7ff fe36 	bl	80010c8 <__malloc_lock>
 800145c:	4a1d      	ldr	r2, [pc, #116]	@ (80014d4 <_free_r+0x90>)
 800145e:	6813      	ldr	r3, [r2, #0]
 8001460:	b933      	cbnz	r3, 8001470 <_free_r+0x2c>
 8001462:	6063      	str	r3, [r4, #4]
 8001464:	6014      	str	r4, [r2, #0]
 8001466:	4628      	mov	r0, r5
 8001468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800146c:	f7ff be32 	b.w	80010d4 <__malloc_unlock>
 8001470:	42a3      	cmp	r3, r4
 8001472:	d908      	bls.n	8001486 <_free_r+0x42>
 8001474:	6820      	ldr	r0, [r4, #0]
 8001476:	1821      	adds	r1, r4, r0
 8001478:	428b      	cmp	r3, r1
 800147a:	bf01      	itttt	eq
 800147c:	6819      	ldreq	r1, [r3, #0]
 800147e:	685b      	ldreq	r3, [r3, #4]
 8001480:	1809      	addeq	r1, r1, r0
 8001482:	6021      	streq	r1, [r4, #0]
 8001484:	e7ed      	b.n	8001462 <_free_r+0x1e>
 8001486:	461a      	mov	r2, r3
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	b10b      	cbz	r3, 8001490 <_free_r+0x4c>
 800148c:	42a3      	cmp	r3, r4
 800148e:	d9fa      	bls.n	8001486 <_free_r+0x42>
 8001490:	6811      	ldr	r1, [r2, #0]
 8001492:	1850      	adds	r0, r2, r1
 8001494:	42a0      	cmp	r0, r4
 8001496:	d10b      	bne.n	80014b0 <_free_r+0x6c>
 8001498:	6820      	ldr	r0, [r4, #0]
 800149a:	4401      	add	r1, r0
 800149c:	1850      	adds	r0, r2, r1
 800149e:	4283      	cmp	r3, r0
 80014a0:	6011      	str	r1, [r2, #0]
 80014a2:	d1e0      	bne.n	8001466 <_free_r+0x22>
 80014a4:	6818      	ldr	r0, [r3, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	6053      	str	r3, [r2, #4]
 80014aa:	4408      	add	r0, r1
 80014ac:	6010      	str	r0, [r2, #0]
 80014ae:	e7da      	b.n	8001466 <_free_r+0x22>
 80014b0:	d902      	bls.n	80014b8 <_free_r+0x74>
 80014b2:	230c      	movs	r3, #12
 80014b4:	602b      	str	r3, [r5, #0]
 80014b6:	e7d6      	b.n	8001466 <_free_r+0x22>
 80014b8:	6820      	ldr	r0, [r4, #0]
 80014ba:	1821      	adds	r1, r4, r0
 80014bc:	428b      	cmp	r3, r1
 80014be:	bf04      	itt	eq
 80014c0:	6819      	ldreq	r1, [r3, #0]
 80014c2:	685b      	ldreq	r3, [r3, #4]
 80014c4:	6063      	str	r3, [r4, #4]
 80014c6:	bf04      	itt	eq
 80014c8:	1809      	addeq	r1, r1, r0
 80014ca:	6021      	streq	r1, [r4, #0]
 80014cc:	6054      	str	r4, [r2, #4]
 80014ce:	e7ca      	b.n	8001466 <_free_r+0x22>
 80014d0:	bd38      	pop	{r3, r4, r5, pc}
 80014d2:	bf00      	nop
 80014d4:	200001c4 	.word	0x200001c4

080014d8 <_init>:
 80014d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014da:	bf00      	nop
 80014dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014de:	bc08      	pop	{r3}
 80014e0:	469e      	mov	lr, r3
 80014e2:	4770      	bx	lr

080014e4 <_fini>:
 80014e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014e6:	bf00      	nop
 80014e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ea:	bc08      	pop	{r3}
 80014ec:	469e      	mov	lr, r3
 80014ee:	4770      	bx	lr
